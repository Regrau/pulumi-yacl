// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getMdbMongodbCluster(args?: GetMdbMongodbClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbMongodbClusterResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("yandex:index/getMdbMongodbCluster:getMdbMongodbCluster", {
        "clusterConfig": args.clusterConfig,
        "clusterId": args.clusterId,
        "createdAt": args.createdAt,
        "databases": args.databases,
        "deletionProtection": args.deletionProtection,
        "description": args.description,
        "environment": args.environment,
        "folderId": args.folderId,
        "health": args.health,
        "hosts": args.hosts,
        "labels": args.labels,
        "maintenanceWindow": args.maintenanceWindow,
        "name": args.name,
        "networkId": args.networkId,
        "resources": args.resources,
        "securityGroupIds": args.securityGroupIds,
        "sharded": args.sharded,
        "status": args.status,
        "users": args.users,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbMongodbCluster.
 */
export interface GetMdbMongodbClusterArgs {
    clusterConfig?: inputs.GetMdbMongodbClusterClusterConfig;
    clusterId?: string;
    createdAt?: string;
    databases?: inputs.GetMdbMongodbClusterDatabase[];
    deletionProtection?: boolean;
    description?: string;
    environment?: string;
    folderId?: string;
    health?: string;
    hosts?: inputs.GetMdbMongodbClusterHost[];
    labels?: {[key: string]: string};
    maintenanceWindow?: inputs.GetMdbMongodbClusterMaintenanceWindow;
    name?: string;
    networkId?: string;
    resources?: inputs.GetMdbMongodbClusterResources;
    securityGroupIds?: string[];
    sharded?: boolean;
    status?: string;
    users?: inputs.GetMdbMongodbClusterUser[];
}

/**
 * A collection of values returned by getMdbMongodbCluster.
 */
export interface GetMdbMongodbClusterResult {
    readonly clusterConfig?: outputs.GetMdbMongodbClusterClusterConfig;
    readonly clusterId: string;
    readonly createdAt: string;
    readonly databases?: outputs.GetMdbMongodbClusterDatabase[];
    readonly deletionProtection: boolean;
    readonly description: string;
    readonly environment?: string;
    readonly folderId: string;
    readonly health: string;
    readonly hosts?: outputs.GetMdbMongodbClusterHost[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly maintenanceWindow: outputs.GetMdbMongodbClusterMaintenanceWindow;
    readonly name?: string;
    readonly networkId?: string;
    readonly resources?: outputs.GetMdbMongodbClusterResources;
    readonly securityGroupIds?: string[];
    readonly sharded: boolean;
    readonly status: string;
    readonly users?: outputs.GetMdbMongodbClusterUser[];
}

export function getMdbMongodbClusterOutput(args?: GetMdbMongodbClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMdbMongodbClusterResult> {
    return pulumi.output(args).apply(a => getMdbMongodbCluster(a, opts))
}

/**
 * A collection of arguments for invoking getMdbMongodbCluster.
 */
export interface GetMdbMongodbClusterOutputArgs {
    clusterConfig?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigArgs>;
    clusterId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    databases?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterDatabaseArgs>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    environment?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    health?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterHostArgs>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.GetMdbMongodbClusterMaintenanceWindowArgs>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.GetMdbMongodbClusterResourcesArgs>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    sharded?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterUserArgs>[]>;
}
