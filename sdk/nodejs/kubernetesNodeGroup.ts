// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class KubernetesNodeGroup extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodeGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodeGroupState, opts?: pulumi.CustomResourceOptions): KubernetesNodeGroup {
        return new KubernetesNodeGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/kubernetesNodeGroup:KubernetesNodeGroup';

    /**
     * Returns true if the given object is an instance of KubernetesNodeGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodeGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodeGroup.__pulumiType;
    }

    public readonly allocationPolicy!: pulumi.Output<outputs.KubernetesNodeGroupAllocationPolicy>;
    public readonly allowedUnsafeSysctls!: pulumi.Output<string[] | undefined>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly deployPolicy!: pulumi.Output<outputs.KubernetesNodeGroupDeployPolicy>;
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly instanceGroupId!: pulumi.Output<string>;
    public readonly instanceTemplate!: pulumi.Output<outputs.KubernetesNodeGroupInstanceTemplate>;
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    public readonly maintenancePolicy!: pulumi.Output<outputs.KubernetesNodeGroupMaintenancePolicy>;
    public readonly name!: pulumi.Output<string>;
    public readonly nodeLabels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly nodeTaints!: pulumi.Output<string[] | undefined>;
    public readonly scalePolicy!: pulumi.Output<outputs.KubernetesNodeGroupScalePolicy>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly version!: pulumi.Output<string>;
    public /*out*/ readonly versionInfos!: pulumi.Output<outputs.KubernetesNodeGroupVersionInfo[]>;

    /**
     * Create a KubernetesNodeGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodeGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodeGroupArgs | KubernetesNodeGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubernetesNodeGroupState | undefined;
            resourceInputs["allocationPolicy"] = state ? state.allocationPolicy : undefined;
            resourceInputs["allowedUnsafeSysctls"] = state ? state.allowedUnsafeSysctls : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deployPolicy"] = state ? state.deployPolicy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceGroupId"] = state ? state.instanceGroupId : undefined;
            resourceInputs["instanceTemplate"] = state ? state.instanceTemplate : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maintenancePolicy"] = state ? state.maintenancePolicy : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeLabels"] = state ? state.nodeLabels : undefined;
            resourceInputs["nodeTaints"] = state ? state.nodeTaints : undefined;
            resourceInputs["scalePolicy"] = state ? state.scalePolicy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["versionInfos"] = state ? state.versionInfos : undefined;
        } else {
            const args = argsOrState as KubernetesNodeGroupArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.instanceTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceTemplate'");
            }
            if ((!args || args.scalePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalePolicy'");
            }
            resourceInputs["allocationPolicy"] = args ? args.allocationPolicy : undefined;
            resourceInputs["allowedUnsafeSysctls"] = args ? args.allowedUnsafeSysctls : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["deployPolicy"] = args ? args.deployPolicy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceTemplate"] = args ? args.instanceTemplate : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maintenancePolicy"] = args ? args.maintenancePolicy : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeLabels"] = args ? args.nodeLabels : undefined;
            resourceInputs["nodeTaints"] = args ? args.nodeTaints : undefined;
            resourceInputs["scalePolicy"] = args ? args.scalePolicy : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["instanceGroupId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["versionInfos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubernetesNodeGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodeGroup resources.
 */
export interface KubernetesNodeGroupState {
    allocationPolicy?: pulumi.Input<inputs.KubernetesNodeGroupAllocationPolicy>;
    allowedUnsafeSysctls?: pulumi.Input<pulumi.Input<string>[]>;
    clusterId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    deployPolicy?: pulumi.Input<inputs.KubernetesNodeGroupDeployPolicy>;
    description?: pulumi.Input<string>;
    instanceGroupId?: pulumi.Input<string>;
    instanceTemplate?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplate>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenancePolicy?: pulumi.Input<inputs.KubernetesNodeGroupMaintenancePolicy>;
    name?: pulumi.Input<string>;
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    scalePolicy?: pulumi.Input<inputs.KubernetesNodeGroupScalePolicy>;
    status?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    versionInfos?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupVersionInfo>[]>;
}

/**
 * The set of arguments for constructing a KubernetesNodeGroup resource.
 */
export interface KubernetesNodeGroupArgs {
    allocationPolicy?: pulumi.Input<inputs.KubernetesNodeGroupAllocationPolicy>;
    allowedUnsafeSysctls?: pulumi.Input<pulumi.Input<string>[]>;
    clusterId: pulumi.Input<string>;
    deployPolicy?: pulumi.Input<inputs.KubernetesNodeGroupDeployPolicy>;
    description?: pulumi.Input<string>;
    instanceTemplate: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplate>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenancePolicy?: pulumi.Input<inputs.KubernetesNodeGroupMaintenancePolicy>;
    name?: pulumi.Input<string>;
    nodeLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodeTaints?: pulumi.Input<pulumi.Input<string>[]>;
    scalePolicy: pulumi.Input<inputs.KubernetesNodeGroupScalePolicy>;
    version?: pulumi.Input<string>;
}
