// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getComputeInstance(args?: GetComputeInstanceArgs, opts?: pulumi.InvokeOptions): Promise<GetComputeInstanceResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("yandex:index/getComputeInstance:getComputeInstance", {
        "folderId": args.folderId,
        "instanceId": args.instanceId,
        "localDisks": args.localDisks,
        "name": args.name,
        "placementPolicy": args.placementPolicy,
    }, opts);
}

/**
 * A collection of arguments for invoking getComputeInstance.
 */
export interface GetComputeInstanceArgs {
    folderId?: string;
    instanceId?: string;
    localDisks?: inputs.GetComputeInstanceLocalDisk[];
    name?: string;
    placementPolicy?: inputs.GetComputeInstancePlacementPolicy;
}

/**
 * A collection of values returned by getComputeInstance.
 */
export interface GetComputeInstanceResult {
    readonly bootDisks: outputs.GetComputeInstanceBootDisk[];
    readonly createdAt: string;
    readonly description: string;
    readonly folderId: string;
    readonly fqdn: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly labels: {[key: string]: string};
    readonly localDisks?: outputs.GetComputeInstanceLocalDisk[];
    readonly metadata: {[key: string]: string};
    readonly name: string;
    readonly networkAccelerationType: string;
    readonly networkInterfaces: outputs.GetComputeInstanceNetworkInterface[];
    readonly placementPolicy?: outputs.GetComputeInstancePlacementPolicy;
    readonly platformId: string;
    readonly resources: outputs.GetComputeInstanceResource[];
    readonly schedulingPolicies: outputs.GetComputeInstanceSchedulingPolicy[];
    readonly secondaryDisks: outputs.GetComputeInstanceSecondaryDisk[];
    readonly serviceAccountId: string;
    readonly status: string;
    readonly zone: string;
}

export function getComputeInstanceOutput(args?: GetComputeInstanceOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetComputeInstanceResult> {
    return pulumi.output(args).apply(a => getComputeInstance(a, opts))
}

/**
 * A collection of arguments for invoking getComputeInstance.
 */
export interface GetComputeInstanceOutputArgs {
    folderId?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    localDisks?: pulumi.Input<pulumi.Input<inputs.GetComputeInstanceLocalDiskArgs>[]>;
    name?: pulumi.Input<string>;
    placementPolicy?: pulumi.Input<inputs.GetComputeInstancePlacementPolicyArgs>;
}
