// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Container Repository. For more information, see
 * [the official documentation](https://cloud.yandex.com/en-ru/docs/container-registry/concepts/lifecycle-policy)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const myLifecyclePolicyById = yandex.getContainerRepositoryLifecyclePolicy({
 *     lifecyclePolicyId: yandex_container_repository_lifecycle_policy.my_lifecycle_policy.id,
 * });
 * ```
 */
export function getContainerRepositoryLifecyclePolicy(args?: GetContainerRepositoryLifecyclePolicyArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerRepositoryLifecyclePolicyResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("yandex:index/getContainerRepositoryLifecyclePolicy:getContainerRepositoryLifecyclePolicy", {
        "lifecyclePolicyId": args.lifecyclePolicyId,
        "name": args.name,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getContainerRepositoryLifecyclePolicy.
 */
export interface GetContainerRepositoryLifecyclePolicyArgs {
    /**
     * The ID of a specific Lifecycle Policy.
     */
    lifecyclePolicyId?: string;
    /**
     * Name of Lifecycle Policy.
     */
    name?: string;
    /**
     * The ID of a repository which Lifecycle Policy belongs to.
     */
    repositoryId?: string;
}

/**
 * A collection of values returned by getContainerRepositoryLifecyclePolicy.
 */
export interface GetContainerRepositoryLifecyclePolicyResult {
    readonly createdAt: string;
    /**
     * Description of the lifecycle policy.
     */
    readonly description: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lifecyclePolicyId: string;
    readonly name: string;
    readonly repositoryId: string;
    readonly rules: outputs.GetContainerRepositoryLifecyclePolicyRule[];
    /**
     * The status of lifecycle policy.
     */
    readonly status: string;
}

export function getContainerRepositoryLifecyclePolicyOutput(args?: GetContainerRepositoryLifecyclePolicyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetContainerRepositoryLifecyclePolicyResult> {
    return pulumi.output(args).apply(a => getContainerRepositoryLifecyclePolicy(a, opts))
}

/**
 * A collection of arguments for invoking getContainerRepositoryLifecyclePolicy.
 */
export interface GetContainerRepositoryLifecyclePolicyOutputArgs {
    /**
     * The ID of a specific Lifecycle Policy.
     */
    lifecyclePolicyId?: pulumi.Input<string>;
    /**
     * Name of Lifecycle Policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of a repository which Lifecycle Policy belongs to.
     */
    repositoryId?: pulumi.Input<string>;
}
