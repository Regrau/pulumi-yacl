// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Managed PostgreSQL user. For more information, see
 * [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const foo = pulumi.output(yandex.getMdbPostgresqlUser({
 *     clusterId: "some_cluster_id",
 *     name: "test",
 * }));
 *
 * export const permission = foo.permissions;
 * ```
 */
export function getMdbPostgresqlUser(args: GetMdbPostgresqlUserArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbPostgresqlUserResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("yandex:index/getMdbPostgresqlUser:getMdbPostgresqlUser", {
        "clusterId": args.clusterId,
        "connLimit": args.connLimit,
        "deletionProtection": args.deletionProtection,
        "login": args.login,
        "name": args.name,
        "settings": args.settings,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbPostgresqlUser.
 */
export interface GetMdbPostgresqlUserArgs {
    /**
     * The ID of the PostgreSQL cluster.
     */
    clusterId: string;
    /**
     * The maximum number of connections per user.
     */
    connLimit?: number;
    /**
     * Inhibits deletion of the user.
     */
    deletionProtection?: string;
    /**
     * User's ability to login.
     */
    login?: boolean;
    /**
     * The name of the PostgreSQL user.
     */
    name: string;
    /**
     * Map of user settings.
     */
    settings?: {[key: string]: string};
}

/**
 * A collection of values returned by getMdbPostgresqlUser.
 */
export interface GetMdbPostgresqlUserResult {
    readonly clusterId: string;
    /**
     * The maximum number of connections per user.
     */
    readonly connLimit?: number;
    /**
     * Inhibits deletion of the user.
     */
    readonly deletionProtection?: string;
    /**
     * List of the user's grants.
     */
    readonly grants: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * User's ability to login.
     */
    readonly login?: boolean;
    readonly name: string;
    /**
     * The password of the user.
     */
    readonly password: string;
    /**
     * Set of permissions granted to the user. The structure is documented below.
     */
    readonly permissions: outputs.GetMdbPostgresqlUserPermission[];
    /**
     * Map of user settings.
     */
    readonly settings: {[key: string]: string};
}

export function getMdbPostgresqlUserOutput(args: GetMdbPostgresqlUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMdbPostgresqlUserResult> {
    return pulumi.output(args).apply(a => getMdbPostgresqlUser(a, opts))
}

/**
 * A collection of arguments for invoking getMdbPostgresqlUser.
 */
export interface GetMdbPostgresqlUserOutputArgs {
    /**
     * The ID of the PostgreSQL cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The maximum number of connections per user.
     */
    connLimit?: pulumi.Input<number>;
    /**
     * Inhibits deletion of the user.
     */
    deletionProtection?: pulumi.Input<string>;
    /**
     * User's ability to login.
     */
    login?: pulumi.Input<boolean>;
    /**
     * The name of the PostgreSQL user.
     */
    name: pulumi.Input<string>;
    /**
     * Map of user settings.
     */
    settings?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
