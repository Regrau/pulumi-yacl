// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class ComputeInstanceGroup extends pulumi.CustomResource {
    /**
     * Get an existing ComputeInstanceGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeInstanceGroupState, opts?: pulumi.CustomResourceOptions): ComputeInstanceGroup {
        return new ComputeInstanceGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeInstanceGroup:ComputeInstanceGroup';

    /**
     * Returns true if the given object is an instance of ComputeInstanceGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeInstanceGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeInstanceGroup.__pulumiType;
    }

    public readonly allocationPolicy!: pulumi.Output<outputs.ComputeInstanceGroupAllocationPolicy>;
    public readonly applicationLoadBalancer!: pulumi.Output<outputs.ComputeInstanceGroupApplicationLoadBalancer | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    public readonly deployPolicy!: pulumi.Output<outputs.ComputeInstanceGroupDeployPolicy>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly folderId!: pulumi.Output<string>;
    public readonly healthChecks!: pulumi.Output<outputs.ComputeInstanceGroupHealthCheck[] | undefined>;
    public readonly instanceTemplate!: pulumi.Output<outputs.ComputeInstanceGroupInstanceTemplate>;
    public /*out*/ readonly instances!: pulumi.Output<outputs.ComputeInstanceGroupInstance[]>;
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly loadBalancer!: pulumi.Output<outputs.ComputeInstanceGroupLoadBalancer | undefined>;
    public readonly maxCheckingHealthDuration!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly scalePolicy!: pulumi.Output<outputs.ComputeInstanceGroupScalePolicy>;
    public readonly serviceAccountId!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly variables!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a ComputeInstanceGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComputeInstanceGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeInstanceGroupArgs | ComputeInstanceGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeInstanceGroupState | undefined;
            resourceInputs["allocationPolicy"] = state ? state.allocationPolicy : undefined;
            resourceInputs["applicationLoadBalancer"] = state ? state.applicationLoadBalancer : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["deployPolicy"] = state ? state.deployPolicy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["healthChecks"] = state ? state.healthChecks : undefined;
            resourceInputs["instanceTemplate"] = state ? state.instanceTemplate : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loadBalancer"] = state ? state.loadBalancer : undefined;
            resourceInputs["maxCheckingHealthDuration"] = state ? state.maxCheckingHealthDuration : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scalePolicy"] = state ? state.scalePolicy : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["variables"] = state ? state.variables : undefined;
        } else {
            const args = argsOrState as ComputeInstanceGroupArgs | undefined;
            if ((!args || args.allocationPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allocationPolicy'");
            }
            if ((!args || args.deployPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deployPolicy'");
            }
            if ((!args || args.instanceTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceTemplate'");
            }
            if ((!args || args.scalePolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalePolicy'");
            }
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["allocationPolicy"] = args ? args.allocationPolicy : undefined;
            resourceInputs["applicationLoadBalancer"] = args ? args.applicationLoadBalancer : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["deployPolicy"] = args ? args.deployPolicy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["healthChecks"] = args ? args.healthChecks : undefined;
            resourceInputs["instanceTemplate"] = args ? args.instanceTemplate : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loadBalancer"] = args ? args.loadBalancer : undefined;
            resourceInputs["maxCheckingHealthDuration"] = args ? args.maxCheckingHealthDuration : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scalePolicy"] = args ? args.scalePolicy : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["variables"] = args ? args.variables : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeInstanceGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComputeInstanceGroup resources.
 */
export interface ComputeInstanceGroupState {
    allocationPolicy?: pulumi.Input<inputs.ComputeInstanceGroupAllocationPolicy>;
    applicationLoadBalancer?: pulumi.Input<inputs.ComputeInstanceGroupApplicationLoadBalancer>;
    createdAt?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    deployPolicy?: pulumi.Input<inputs.ComputeInstanceGroupDeployPolicy>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupHealthCheck>[]>;
    instanceTemplate?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplate>;
    instances?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstance>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadBalancer?: pulumi.Input<inputs.ComputeInstanceGroupLoadBalancer>;
    maxCheckingHealthDuration?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    scalePolicy?: pulumi.Input<inputs.ComputeInstanceGroupScalePolicy>;
    serviceAccountId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a ComputeInstanceGroup resource.
 */
export interface ComputeInstanceGroupArgs {
    allocationPolicy: pulumi.Input<inputs.ComputeInstanceGroupAllocationPolicy>;
    applicationLoadBalancer?: pulumi.Input<inputs.ComputeInstanceGroupApplicationLoadBalancer>;
    deletionProtection?: pulumi.Input<boolean>;
    deployPolicy: pulumi.Input<inputs.ComputeInstanceGroupDeployPolicy>;
    description?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupHealthCheck>[]>;
    instanceTemplate: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplate>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    loadBalancer?: pulumi.Input<inputs.ComputeInstanceGroupLoadBalancer>;
    maxCheckingHealthDuration?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    scalePolicy: pulumi.Input<inputs.ComputeInstanceGroupScalePolicy>;
    serviceAccountId: pulumi.Input<string>;
    variables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
