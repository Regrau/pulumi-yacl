// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface AlbBackendGroupGrpcBackend {
    healthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheck>;
    loadBalancingConfig?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendLoadBalancingConfig>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendTls>;
    weight?: pulumi.Input<number>;
}

export interface AlbBackendGroupGrpcBackendHealthcheck {
    grpcHealthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck>;
    interval: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck>;
    timeout: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck {
    serviceName?: pulumi.Input<string>;
}

export interface AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
}

export interface AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface AlbBackendGroupGrpcBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupGrpcBackendTls {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.AlbBackendGroupGrpcBackendTlsValidationContext>;
}

export interface AlbBackendGroupGrpcBackendTlsValidationContext {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackend {
    healthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheck>;
    http2?: pulumi.Input<boolean>;
    loadBalancingConfig?: pulumi.Input<inputs.AlbBackendGroupHttpBackendLoadBalancingConfig>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    storageBucket?: pulumi.Input<string>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.AlbBackendGroupHttpBackendTls>;
    weight?: pulumi.Input<number>;
}

export interface AlbBackendGroupHttpBackendHealthcheck {
    grpcHealthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck>;
    interval: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck>;
    timeout: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck {
    serviceName?: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface AlbBackendGroupHttpBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupHttpBackendTls {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.AlbBackendGroupHttpBackendTlsValidationContext>;
}

export interface AlbBackendGroupHttpBackendTlsValidationContext {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface AlbBackendGroupSessionAffinity {
    connection?: pulumi.Input<inputs.AlbBackendGroupSessionAffinityConnection>;
    cookie?: pulumi.Input<inputs.AlbBackendGroupSessionAffinityCookie>;
    header?: pulumi.Input<inputs.AlbBackendGroupSessionAffinityHeader>;
}

export interface AlbBackendGroupSessionAffinityConnection {
    sourceIp?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupSessionAffinityCookie {
    name: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
}

export interface AlbBackendGroupSessionAffinityHeader {
    headerName: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackend {
    enableProxyProtocol?: pulumi.Input<boolean>;
    healthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheck>;
    loadBalancingConfig?: pulumi.Input<inputs.AlbBackendGroupStreamBackendLoadBalancingConfig>;
    name: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.AlbBackendGroupStreamBackendTls>;
    weight?: pulumi.Input<number>;
}

export interface AlbBackendGroupStreamBackendHealthcheck {
    grpcHealthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck>;
    interval: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck>;
    timeout: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck {
    serviceName?: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface AlbBackendGroupStreamBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface AlbBackendGroupStreamBackendTls {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.AlbBackendGroupStreamBackendTlsValidationContext>;
}

export interface AlbBackendGroupStreamBackendTlsValidationContext {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface AlbHttpRouterRouteOptions {
    rbac?: pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbac>;
}

export interface AlbHttpRouterRouteOptionsRbac {
    action?: pulumi.Input<string>;
    principals: pulumi.Input<pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipal>[]>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipal {
    andPrincipals: pulumi.Input<pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal>[]>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal {
    any?: pulumi.Input<boolean>;
    header?: pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader>;
    remoteIp?: pulumi.Input<string>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue>;
}

export interface AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface AlbLoadBalancerAllocationPolicy {
    locations: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerAllocationPolicyLocation>[]>;
}

export interface AlbLoadBalancerAllocationPolicyLocation {
    disableTraffic?: pulumi.Input<boolean>;
    subnetId: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}

export interface AlbLoadBalancerListener {
    endpoints?: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListenerEndpoint>[]>;
    http?: pulumi.Input<inputs.AlbLoadBalancerListenerHttp>;
    name: pulumi.Input<string>;
    stream?: pulumi.Input<inputs.AlbLoadBalancerListenerStream>;
    tls?: pulumi.Input<inputs.AlbLoadBalancerListenerTls>;
}

export interface AlbLoadBalancerListenerEndpoint {
    addresses: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddress>[]>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface AlbLoadBalancerListenerEndpointAddress {
    externalIpv4Address?: pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddressExternalIpv4Address>;
    externalIpv6Address?: pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddressExternalIpv6Address>;
    internalIpv4Address?: pulumi.Input<inputs.AlbLoadBalancerListenerEndpointAddressInternalIpv4Address>;
}

export interface AlbLoadBalancerListenerEndpointAddressExternalIpv4Address {
    address?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerEndpointAddressExternalIpv6Address {
    address?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerEndpointAddressInternalIpv4Address {
    address?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerHttp {
    handler?: pulumi.Input<inputs.AlbLoadBalancerListenerHttpHandler>;
    redirects?: pulumi.Input<inputs.AlbLoadBalancerListenerHttpRedirects>;
}

export interface AlbLoadBalancerListenerHttpHandler {
    allowHttp10?: pulumi.Input<boolean>;
    http2Options?: pulumi.Input<inputs.AlbLoadBalancerListenerHttpHandlerHttp2Options>;
    httpRouterId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerHttpHandlerHttp2Options {
    maxConcurrentStreams?: pulumi.Input<number>;
}

export interface AlbLoadBalancerListenerHttpRedirects {
    httpToHttps?: pulumi.Input<boolean>;
}

export interface AlbLoadBalancerListenerStream {
    handler?: pulumi.Input<inputs.AlbLoadBalancerListenerStreamHandler>;
}

export interface AlbLoadBalancerListenerStreamHandler {
    backendGroupId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerTls {
    defaultHandler: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandler>;
    sniHandlers?: pulumi.Input<pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandler>[]>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandler {
    certificateIds: pulumi.Input<pulumi.Input<string>[]>;
    httpHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler>;
    streamHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler {
    allowHttp10?: pulumi.Input<boolean>;
    http2Options?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options>;
    httpRouterId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options {
    maxConcurrentStreams?: pulumi.Input<number>;
}

export interface AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler {
    backendGroupId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerTlsSniHandler {
    handler: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandler>;
    name: pulumi.Input<string>;
    serverNames: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandler {
    certificateIds: pulumi.Input<pulumi.Input<string>[]>;
    httpHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler>;
    streamHandler?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler {
    allowHttp10?: pulumi.Input<boolean>;
    http2Options?: pulumi.Input<inputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options>;
    httpRouterId?: pulumi.Input<string>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options {
    maxConcurrentStreams?: pulumi.Input<number>;
}

export interface AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler {
    backendGroupId?: pulumi.Input<string>;
}

export interface AlbTargetGroupTarget {
    ipAddress: pulumi.Input<string>;
    privateIpv4Address?: pulumi.Input<boolean>;
    subnetId?: pulumi.Input<string>;
}

export interface AlbVirtualHostModifyRequestHeader {
    append?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    remove?: pulumi.Input<boolean>;
    replace?: pulumi.Input<string>;
}

export interface AlbVirtualHostModifyResponseHeader {
    append?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    remove?: pulumi.Input<boolean>;
    replace?: pulumi.Input<string>;
}

export interface AlbVirtualHostRoute {
    grpcRoute?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRoute>;
    httpRoute?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRoute>;
    name?: pulumi.Input<string>;
    routeOptions?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptions>;
}

export interface AlbVirtualHostRouteGrpcRoute {
    grpcMatches?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcMatch>[]>;
    grpcRouteAction?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcRouteAction>;
    grpcStatusResponseAction?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcMatch {
    fqmn?: pulumi.Input<inputs.AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcRouteAction {
    autoHostRewrite?: pulumi.Input<boolean>;
    backendGroupId: pulumi.Input<string>;
    hostRewrite?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    maxTimeout?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction {
    status?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteHttpRoute {
    directResponseAction?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteDirectResponseAction>;
    httpMatches?: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteHttpMatch>[]>;
    httpRouteAction?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteHttpRouteAction>;
    redirectAction?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteRedirectAction>;
}

export interface AlbVirtualHostRouteHttpRouteDirectResponseAction {
    body?: pulumi.Input<string>;
    status?: pulumi.Input<number>;
}

export interface AlbVirtualHostRouteHttpRouteHttpMatch {
    httpMethods?: pulumi.Input<pulumi.Input<string>[]>;
    path?: pulumi.Input<inputs.AlbVirtualHostRouteHttpRouteHttpMatchPath>;
}

export interface AlbVirtualHostRouteHttpRouteHttpMatchPath {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteHttpRouteHttpRouteAction {
    autoHostRewrite?: pulumi.Input<boolean>;
    backendGroupId: pulumi.Input<string>;
    hostRewrite?: pulumi.Input<string>;
    idleTimeout?: pulumi.Input<string>;
    prefixRewrite?: pulumi.Input<string>;
    timeout?: pulumi.Input<string>;
    upgradeTypes?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlbVirtualHostRouteHttpRouteRedirectAction {
    removeQuery?: pulumi.Input<boolean>;
    replaceHost?: pulumi.Input<string>;
    replacePath?: pulumi.Input<string>;
    replacePort?: pulumi.Input<number>;
    replacePrefix?: pulumi.Input<string>;
    replaceScheme?: pulumi.Input<string>;
    responseCode?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteOptions {
    rbac?: pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbac>;
}

export interface AlbVirtualHostRouteOptionsRbac {
    action?: pulumi.Input<string>;
    principals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipal>[]>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipal {
    andPrincipals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal>[]>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal {
    any?: pulumi.Input<boolean>;
    header?: pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader>;
    remoteIp?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue>;
}

export interface AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteRouteOptions {
    rbac?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbac>;
}

export interface AlbVirtualHostRouteRouteOptionsRbac {
    action?: pulumi.Input<string>;
    principals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipal>[]>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipal {
    andPrincipals: pulumi.Input<pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal>[]>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal {
    any?: pulumi.Input<boolean>;
    header?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader>;
    remoteIp?: pulumi.Input<string>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader {
    name: pulumi.Input<string>;
    value?: pulumi.Input<inputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue>;
}

export interface AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue {
    exact?: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
}

export interface CdnOriginGroupOrigin {
    backup?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    originGroupId?: pulumi.Input<number>;
    source: pulumi.Input<string>;
}

export interface CdnResourceOptions {
    allowedHttpMethods?: pulumi.Input<pulumi.Input<string>[]>;
    browserCacheSettings?: pulumi.Input<number>;
    cacheHttpHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    cors?: pulumi.Input<pulumi.Input<string>[]>;
    customHostHeader?: pulumi.Input<string>;
    customServerName?: pulumi.Input<string>;
    disableCache?: pulumi.Input<boolean>;
    disableProxyForceRanges?: pulumi.Input<boolean>;
    edgeCacheSettings?: pulumi.Input<number>;
    fetchedCompressed?: pulumi.Input<boolean>;
    forwardHostHeader?: pulumi.Input<boolean>;
    gzipOn?: pulumi.Input<boolean>;
    ignoreCookie?: pulumi.Input<boolean>;
    ignoreQueryParams?: pulumi.Input<boolean>;
    proxyCacheMethodsSet?: pulumi.Input<boolean>;
    queryParamsBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    queryParamsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    redirectHttpToHttps?: pulumi.Input<boolean>;
    redirectHttpsToHttp?: pulumi.Input<boolean>;
    slice?: pulumi.Input<boolean>;
    staticRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    staticResponseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface CdnResourceSslCertificate {
    certificateManagerId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface ComputeDiskDiskPlacementPolicy {
    diskPlacementGroupId: pulumi.Input<string>;
}

export interface ComputeInstanceBootDisk {
    autoDelete?: pulumi.Input<boolean>;
    deviceName?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    initializeParams?: pulumi.Input<inputs.ComputeInstanceBootDiskInitializeParams>;
    mode?: pulumi.Input<string>;
}

export interface ComputeInstanceBootDiskInitializeParams {
    blockSize?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupAllocationPolicy {
    zones: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComputeInstanceGroupApplicationLoadBalancer {
    maxOpeningTrafficDuration?: pulumi.Input<number>;
    statusMessage?: pulumi.Input<string>;
    targetGroupDescription?: pulumi.Input<string>;
    targetGroupId?: pulumi.Input<string>;
    targetGroupLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetGroupName?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupDeployPolicy {
    maxCreating?: pulumi.Input<number>;
    maxDeleting?: pulumi.Input<number>;
    maxExpansion: pulumi.Input<number>;
    maxUnavailable: pulumi.Input<number>;
    startupDuration?: pulumi.Input<number>;
    strategy?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupHealthCheck {
    healthyThreshold?: pulumi.Input<number>;
    httpOptions?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupHealthCheckHttpOption>[]>;
    interval?: pulumi.Input<number>;
    tcpOptions?: pulumi.Input<inputs.ComputeInstanceGroupHealthCheckTcpOptions>;
    timeout?: pulumi.Input<number>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupHealthCheckHttpOption {
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface ComputeInstanceGroupHealthCheckTcpOptions {
    port: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstance {
    fqdn?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceNetworkInterface>[]>;
    status?: pulumi.Input<string>;
    statusChangedAt?: pulumi.Input<string>;
    statusMessage?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceNetworkInterface {
    index?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    ipv4?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<boolean>;
    ipv6Address?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    nat?: pulumi.Input<boolean>;
    natIpAddress?: pulumi.Input<string>;
    natIpVersion?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplate {
    bootDisk: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateBootDisk>;
    description?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterface>[]>;
    networkSettings?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkSetting>[]>;
    placementPolicy?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplatePlacementPolicy>;
    platformId?: pulumi.Input<string>;
    resources: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateResources>;
    schedulingPolicy?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateSchedulingPolicy>;
    secondaryDisks?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateSecondaryDisk>[]>;
    serviceAccountId?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateBootDisk {
    deviceName?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    initializeParams?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams>;
    mode?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams {
    description?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterface {
    dnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord>[]>;
    ipAddress?: pulumi.Input<string>;
    ipv4?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<boolean>;
    ipv6Address?: pulumi.Input<string>;
    ipv6DnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord>[]>;
    nat?: pulumi.Input<boolean>;
    natDnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord>[]>;
    natIpAddress?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateNetworkSetting {
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplatePlacementPolicy {
    placementGroupId: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateResources {
    coreFraction?: pulumi.Input<number>;
    cores: pulumi.Input<number>;
    gpus?: pulumi.Input<number>;
    memory: pulumi.Input<number>;
}

export interface ComputeInstanceGroupInstanceTemplateSchedulingPolicy {
    preemptible?: pulumi.Input<boolean>;
}

export interface ComputeInstanceGroupInstanceTemplateSecondaryDisk {
    deviceName?: pulumi.Input<string>;
    diskId?: pulumi.Input<string>;
    initializeParams?: pulumi.Input<inputs.ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams>;
    mode?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams {
    description?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupLoadBalancer {
    maxOpeningTrafficDuration?: pulumi.Input<number>;
    statusMessage?: pulumi.Input<string>;
    targetGroupDescription?: pulumi.Input<string>;
    targetGroupId?: pulumi.Input<string>;
    targetGroupLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    targetGroupName?: pulumi.Input<string>;
}

export interface ComputeInstanceGroupScalePolicy {
    autoScale?: pulumi.Input<inputs.ComputeInstanceGroupScalePolicyAutoScale>;
    fixedScale?: pulumi.Input<inputs.ComputeInstanceGroupScalePolicyFixedScale>;
    testAutoScale?: pulumi.Input<inputs.ComputeInstanceGroupScalePolicyTestAutoScale>;
}

export interface ComputeInstanceGroupScalePolicyAutoScale {
    cpuUtilizationTarget?: pulumi.Input<number>;
    customRules?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupScalePolicyAutoScaleCustomRule>[]>;
    initialSize: pulumi.Input<number>;
    maxSize?: pulumi.Input<number>;
    measurementDuration: pulumi.Input<number>;
    minZoneSize?: pulumi.Input<number>;
    stabilizationDuration?: pulumi.Input<number>;
    warmupDuration?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyAutoScaleCustomRule {
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metricName: pulumi.Input<string>;
    metricType: pulumi.Input<string>;
    ruleType: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyFixedScale {
    size: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyTestAutoScale {
    cpuUtilizationTarget?: pulumi.Input<number>;
    customRules?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule>[]>;
    initialSize: pulumi.Input<number>;
    maxSize?: pulumi.Input<number>;
    measurementDuration: pulumi.Input<number>;
    minZoneSize?: pulumi.Input<number>;
    stabilizationDuration?: pulumi.Input<number>;
    warmupDuration?: pulumi.Input<number>;
}

export interface ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule {
    folderId?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metricName: pulumi.Input<string>;
    metricType: pulumi.Input<string>;
    ruleType: pulumi.Input<string>;
    service?: pulumi.Input<string>;
    target: pulumi.Input<number>;
}

export interface ComputeInstanceLocalDisk {
    deviceName?: pulumi.Input<string>;
    sizeBytes: pulumi.Input<number>;
}

export interface ComputeInstanceNetworkInterface {
    dnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterfaceDnsRecord>[]>;
    index?: pulumi.Input<number>;
    ipAddress?: pulumi.Input<string>;
    ipv4?: pulumi.Input<boolean>;
    ipv6?: pulumi.Input<boolean>;
    ipv6Address?: pulumi.Input<string>;
    ipv6DnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterfaceIpv6DnsRecord>[]>;
    macAddress?: pulumi.Input<string>;
    nat?: pulumi.Input<boolean>;
    natDnsRecords?: pulumi.Input<pulumi.Input<inputs.ComputeInstanceNetworkInterfaceNatDnsRecord>[]>;
    natIpAddress?: pulumi.Input<string>;
    natIpVersion?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId: pulumi.Input<string>;
}

export interface ComputeInstanceNetworkInterfaceDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceNetworkInterfaceIpv6DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstanceNetworkInterfaceNatDnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface ComputeInstancePlacementPolicy {
    hostAffinityRules?: pulumi.Input<pulumi.Input<inputs.ComputeInstancePlacementPolicyHostAffinityRule>[]>;
    placementGroupId?: pulumi.Input<string>;
}

export interface ComputeInstancePlacementPolicyHostAffinityRule {
    key: pulumi.Input<string>;
    op: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ComputeInstanceResources {
    coreFraction?: pulumi.Input<number>;
    cores: pulumi.Input<number>;
    gpus?: pulumi.Input<number>;
    memory: pulumi.Input<number>;
}

export interface ComputeInstanceSchedulingPolicy {
    preemptible?: pulumi.Input<boolean>;
}

export interface ComputeInstanceSecondaryDisk {
    autoDelete?: pulumi.Input<boolean>;
    deviceName?: pulumi.Input<string>;
    diskId: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfig {
    hadoop?: pulumi.Input<inputs.DataprocClusterClusterConfigHadoop>;
    subclusterSpecs: pulumi.Input<pulumi.Input<inputs.DataprocClusterClusterConfigSubclusterSpec>[]>;
    versionId?: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfigHadoop {
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
    sshPublicKeys?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface DataprocClusterClusterConfigSubclusterSpec {
    assignPublicIp?: pulumi.Input<boolean>;
    autoscalingConfig?: pulumi.Input<inputs.DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig>;
    hostsCount: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    resources: pulumi.Input<inputs.DataprocClusterClusterConfigSubclusterSpecResources>;
    role: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig {
    cpuUtilizationTarget?: pulumi.Input<number>;
    decommissionTimeout?: pulumi.Input<number>;
    maxHostsCount: pulumi.Input<number>;
    measurementDuration?: pulumi.Input<number>;
    preemptible?: pulumi.Input<boolean>;
    stabilizationDuration?: pulumi.Input<number>;
    warmupDuration?: pulumi.Input<number>;
}

export interface DataprocClusterClusterConfigSubclusterSpecResources {
    diskSize: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface DatatransferEndpointSettings {
    clickhouseSource?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSource>;
    clickhouseTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTarget>;
    mongoSource?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSource>;
    mongoTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTarget>;
    mysqlSource?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSource>;
    mysqlTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTarget>;
    postgresSource?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSource>;
    postgresTarget?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTarget>;
}

export interface DatatransferEndpointSettingsClickhouseSource {
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnection>;
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions {
    database?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise {
    httpPort?: pulumi.Input<number>;
    nativePort?: pulumi.Input<number>;
    shards?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard>[]>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTarget {
    altNames?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetAltName>[]>;
    cleanupPolicy?: pulumi.Input<string>;
    clickhouseClusterName?: pulumi.Input<string>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnection>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sharding?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetSharding>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetAltName {
    fromName?: pulumi.Input<string>;
    toName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions {
    database?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise {
    httpPort?: pulumi.Input<number>;
    nativePort?: pulumi.Input<number>;
    shards?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard>[]>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetSharding {
    columnValueHash?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash>;
    transferId?: pulumi.Input<inputs.DatatransferEndpointSettingsClickhouseTargetShardingTransferId>;
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash {
    columnName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsClickhouseTargetShardingTransferId {
}

export interface DatatransferEndpointSettingsMongoSource {
    collections?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceCollection>[]>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnection>;
    excludedCollections?: pulumi.Input<pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceExcludedCollection>[]>;
    secondaryPreferredMode?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceCollection {
    collectionName?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions {
    authSource?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    replicaSet?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoSourceExcludedCollection {
    collectionName?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTarget {
    cleanupPolicy?: pulumi.Input<string>;
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnection>;
    database?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnetId?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTargetConnection {
    connectionOptions?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions {
    authSource?: pulumi.Input<string>;
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    replicaSet?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSource {
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnection>;
    database?: pulumi.Input<string>;
    excludeTablesRegexes?: pulumi.Input<pulumi.Input<string>[]>;
    includeTablesRegexes?: pulumi.Input<pulumi.Input<string>[]>;
    objectTransferSettings?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceObjectTransferSettings>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourcePassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceDatabase?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSourceObjectTransferSettings {
    routine?: pulumi.Input<string>;
    trigger?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlSourcePassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlTarget {
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnection>;
    database?: pulumi.Input<string>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetPassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    skipConstraintChecks?: pulumi.Input<boolean>;
    sqlMode?: pulumi.Input<string>;
    timezone?: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsMysqlTargetPassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSource {
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnection>;
    database?: pulumi.Input<string>;
    excludeTables?: pulumi.Input<pulumi.Input<string>[]>;
    includeTables?: pulumi.Input<pulumi.Input<string>[]>;
    objectTransferSettings?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceObjectTransferSettings>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourcePassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    serviceSchema?: pulumi.Input<string>;
    slotGigabyteLagLimit?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSourceObjectTransferSettings {
    cast?: pulumi.Input<string>;
    collation?: pulumi.Input<string>;
    constraint?: pulumi.Input<string>;
    defaultValues?: pulumi.Input<string>;
    fkConstraint?: pulumi.Input<string>;
    function?: pulumi.Input<string>;
    index?: pulumi.Input<string>;
    materializedView?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    primaryKey?: pulumi.Input<string>;
    rule?: pulumi.Input<string>;
    sequence?: pulumi.Input<string>;
    sequenceOwnedBy?: pulumi.Input<string>;
    table?: pulumi.Input<string>;
    trigger?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    view?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresSourcePassword {
    raw?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresTarget {
    connection?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnection>;
    database?: pulumi.Input<string>;
    password?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetPassword>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    user?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnection {
    mdbClusterId?: pulumi.Input<string>;
    onPremise?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremise>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremise {
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    port?: pulumi.Input<number>;
    subnetId?: pulumi.Input<string>;
    tlsMode?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode {
    disabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled>;
    enabled?: pulumi.Input<inputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled>;
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled {
}

export interface DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled {
    caCertificate?: pulumi.Input<string>;
}

export interface DatatransferEndpointSettingsPostgresTargetPassword {
    raw?: pulumi.Input<string>;
}

export interface FunctionContent {
    zipFilename: pulumi.Input<string>;
}

export interface FunctionPackage {
    bucketName: pulumi.Input<string>;
    objectName: pulumi.Input<string>;
    sha256?: pulumi.Input<string>;
}

export interface FunctionScalingPolicyPolicy {
    tag: pulumi.Input<string>;
    zoneInstancesLimit?: pulumi.Input<number>;
    zoneRequestsLimit?: pulumi.Input<number>;
}

export interface FunctionSecret {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface FunctionTriggerDlq {
    queueId: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
}

export interface FunctionTriggerFunction {
    id: pulumi.Input<string>;
    retryAttempts?: pulumi.Input<string>;
    retryInterval?: pulumi.Input<string>;
    serviceAccountId?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
}

export interface FunctionTriggerIot {
    deviceId?: pulumi.Input<string>;
    registryId: pulumi.Input<string>;
    topic?: pulumi.Input<string>;
}

export interface FunctionTriggerLogGroup {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    logGroupIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionTriggerLogging {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    groupId: pulumi.Input<string>;
    levels: pulumi.Input<pulumi.Input<string>[]>;
    resourceIds: pulumi.Input<pulumi.Input<string>[]>;
    resourceTypes: pulumi.Input<pulumi.Input<string>[]>;
}

export interface FunctionTriggerMessageQueue {
    batchCutoff: pulumi.Input<string>;
    batchSize?: pulumi.Input<string>;
    queueId: pulumi.Input<string>;
    serviceAccountId: pulumi.Input<string>;
    visibilityTimeout?: pulumi.Input<string>;
}

export interface FunctionTriggerObjectStorage {
    bucketId: pulumi.Input<string>;
    create?: pulumi.Input<boolean>;
    delete?: pulumi.Input<boolean>;
    prefix?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
    update?: pulumi.Input<boolean>;
}

export interface FunctionTriggerTimer {
    cronExpression: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackend {
    healthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheck;
    loadBalancingConfig?: inputs.GetAlbBackendGroupGrpcBackendLoadBalancingConfig;
    name?: string;
    port?: number;
    targetGroupIds?: string[];
    tls?: inputs.GetAlbBackendGroupGrpcBackendTls;
    weight?: number;
}

export interface GetAlbBackendGroupGrpcBackendArgs {
    healthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckArgs>;
    loadBalancingConfig?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendLoadBalancingConfigArgs>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendTlsArgs>;
    weight?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheck {
    grpcHealthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck;
    healthcheckPort?: number;
    healthyThreshold?: number;
    httpHealthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck;
    interval?: string;
    intervalJitterPercent?: number;
    streamHealthcheck?: inputs.GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck;
    timeout?: string;
    unhealthyThreshold?: number;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckArgs {
    grpcHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckArgs>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckArgs>;
    interval?: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckArgs>;
    timeout?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck {
    serviceName?: string;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckArgs {
    serviceName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck {
    host?: string;
    http2?: boolean;
    path?: string;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckArgs {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck {
    receive?: string;
    send?: string;
}

export interface GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckArgs {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupGrpcBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: number;
    mode?: string;
    panicThreshold?: number;
    strictLocality?: boolean;
}

export interface GetAlbBackendGroupGrpcBackendLoadBalancingConfigArgs {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupGrpcBackendTls {
    sni?: string;
    validationContext?: inputs.GetAlbBackendGroupGrpcBackendTlsValidationContext;
}

export interface GetAlbBackendGroupGrpcBackendTlsArgs {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.GetAlbBackendGroupGrpcBackendTlsValidationContextArgs>;
}

export interface GetAlbBackendGroupGrpcBackendTlsValidationContext {
    trustedCaBytes?: string;
    trustedCaId?: string;
}

export interface GetAlbBackendGroupGrpcBackendTlsValidationContextArgs {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackend {
    healthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheck;
    http2?: boolean;
    loadBalancingConfig?: inputs.GetAlbBackendGroupHttpBackendLoadBalancingConfig;
    name?: string;
    port?: number;
    storageBucket?: string;
    targetGroupIds?: string[];
    tls?: inputs.GetAlbBackendGroupHttpBackendTls;
    weight?: number;
}

export interface GetAlbBackendGroupHttpBackendArgs {
    healthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckArgs>;
    http2?: pulumi.Input<boolean>;
    loadBalancingConfig?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendLoadBalancingConfigArgs>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    storageBucket?: pulumi.Input<string>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendTlsArgs>;
    weight?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheck {
    grpcHealthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck;
    healthcheckPort?: number;
    healthyThreshold?: number;
    httpHealthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck;
    interval?: string;
    intervalJitterPercent?: number;
    streamHealthcheck?: inputs.GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck;
    timeout?: string;
    unhealthyThreshold?: number;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckArgs {
    grpcHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckArgs>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs>;
    interval?: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckArgs>;
    timeout?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck {
    serviceName?: string;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckArgs {
    serviceName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheck {
    host?: string;
    http2?: boolean;
    path?: string;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheck {
    receive?: string;
    send?: string;
}

export interface GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckArgs {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupHttpBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: number;
    mode?: string;
    panicThreshold?: number;
    strictLocality?: boolean;
}

export interface GetAlbBackendGroupHttpBackendLoadBalancingConfigArgs {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupHttpBackendTls {
    sni?: string;
    validationContext?: inputs.GetAlbBackendGroupHttpBackendTlsValidationContext;
}

export interface GetAlbBackendGroupHttpBackendTlsArgs {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.GetAlbBackendGroupHttpBackendTlsValidationContextArgs>;
}

export interface GetAlbBackendGroupHttpBackendTlsValidationContext {
    trustedCaBytes?: string;
    trustedCaId?: string;
}

export interface GetAlbBackendGroupHttpBackendTlsValidationContextArgs {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupSessionAffinity {
    connection?: inputs.GetAlbBackendGroupSessionAffinityConnection;
    cookie?: inputs.GetAlbBackendGroupSessionAffinityCookie;
    header?: inputs.GetAlbBackendGroupSessionAffinityHeader;
}

export interface GetAlbBackendGroupSessionAffinityArgs {
    connection?: pulumi.Input<inputs.GetAlbBackendGroupSessionAffinityConnectionArgs>;
    cookie?: pulumi.Input<inputs.GetAlbBackendGroupSessionAffinityCookieArgs>;
    header?: pulumi.Input<inputs.GetAlbBackendGroupSessionAffinityHeaderArgs>;
}

export interface GetAlbBackendGroupSessionAffinityConnection {
    sourceIp?: boolean;
}

export interface GetAlbBackendGroupSessionAffinityConnectionArgs {
    sourceIp?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupSessionAffinityCookie {
    name?: string;
    ttl?: string;
}

export interface GetAlbBackendGroupSessionAffinityCookieArgs {
    name?: pulumi.Input<string>;
    ttl?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupSessionAffinityHeader {
    headerName?: string;
}

export interface GetAlbBackendGroupSessionAffinityHeaderArgs {
    headerName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackendArgs {
    enableProxyProtocol?: pulumi.Input<boolean>;
    healthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckArgs>;
    loadBalancingConfig?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendLoadBalancingConfigArgs>;
    name?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    targetGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tls?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendTlsArgs>;
    weight?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupStreamBackend {
    enableProxyProtocol?: boolean;
    healthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheck;
    loadBalancingConfig?: inputs.GetAlbBackendGroupStreamBackendLoadBalancingConfig;
    name?: string;
    port?: number;
    targetGroupIds?: string[];
    tls?: inputs.GetAlbBackendGroupStreamBackendTls;
    weight?: number;
}

export interface GetAlbBackendGroupStreamBackendHealthcheck {
    grpcHealthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck;
    healthcheckPort?: number;
    healthyThreshold?: number;
    httpHealthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck;
    interval?: string;
    intervalJitterPercent?: number;
    streamHealthcheck?: inputs.GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck;
    timeout?: string;
    unhealthyThreshold?: number;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckArgs {
    grpcHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckArgs>;
    healthcheckPort?: pulumi.Input<number>;
    healthyThreshold?: pulumi.Input<number>;
    httpHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckArgs>;
    interval?: pulumi.Input<string>;
    intervalJitterPercent?: pulumi.Input<number>;
    streamHealthcheck?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckArgs>;
    timeout?: pulumi.Input<string>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck {
    serviceName?: string;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckArgs {
    serviceName?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheck {
    host?: string;
    http2?: boolean;
    path?: string;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckArgs {
    host?: pulumi.Input<string>;
    http2?: pulumi.Input<boolean>;
    path?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheck {
    receive?: string;
    send?: string;
}

export interface GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckArgs {
    receive?: pulumi.Input<string>;
    send?: pulumi.Input<string>;
}

export interface GetAlbBackendGroupStreamBackendLoadBalancingConfig {
    localityAwareRoutingPercent?: number;
    mode?: string;
    panicThreshold?: number;
    strictLocality?: boolean;
}

export interface GetAlbBackendGroupStreamBackendLoadBalancingConfigArgs {
    localityAwareRoutingPercent?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    panicThreshold?: pulumi.Input<number>;
    strictLocality?: pulumi.Input<boolean>;
}

export interface GetAlbBackendGroupStreamBackendTls {
    sni?: string;
    validationContext?: inputs.GetAlbBackendGroupStreamBackendTlsValidationContext;
}

export interface GetAlbBackendGroupStreamBackendTlsArgs {
    sni?: pulumi.Input<string>;
    validationContext?: pulumi.Input<inputs.GetAlbBackendGroupStreamBackendTlsValidationContextArgs>;
}

export interface GetAlbBackendGroupStreamBackendTlsValidationContext {
    trustedCaBytes?: string;
    trustedCaId?: string;
}

export interface GetAlbBackendGroupStreamBackendTlsValidationContextArgs {
    trustedCaBytes?: pulumi.Input<string>;
    trustedCaId?: pulumi.Input<string>;
}

export interface GetCdnResourceOptions {
    allowedHttpMethods?: string[];
    browserCacheSettings?: number;
    cacheHttpHeaders?: string[];
    cors?: string[];
    customHostHeader?: string;
    customServerName?: string;
    disableCache?: boolean;
    disableProxyForceRanges?: boolean;
    edgeCacheSettings?: number;
    fetchedCompressed?: boolean;
    forwardHostHeader?: boolean;
    gzipOn?: boolean;
    ignoreCookie?: boolean;
    ignoreQueryParams?: boolean;
    proxyCacheMethodsSet?: boolean;
    queryParamsBlacklists?: string[];
    queryParamsWhitelists?: string[];
    redirectHttpToHttps?: boolean;
    redirectHttpsToHttp?: boolean;
    slice?: boolean;
    staticRequestHeaders?: string[];
    staticResponseHeaders?: {[key: string]: string};
}

export interface GetCdnResourceOptionsArgs {
    allowedHttpMethods?: pulumi.Input<pulumi.Input<string>[]>;
    browserCacheSettings?: pulumi.Input<number>;
    cacheHttpHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    cors?: pulumi.Input<pulumi.Input<string>[]>;
    customHostHeader?: pulumi.Input<string>;
    customServerName?: pulumi.Input<string>;
    disableCache?: pulumi.Input<boolean>;
    disableProxyForceRanges?: pulumi.Input<boolean>;
    edgeCacheSettings?: pulumi.Input<number>;
    fetchedCompressed?: pulumi.Input<boolean>;
    forwardHostHeader?: pulumi.Input<boolean>;
    gzipOn?: pulumi.Input<boolean>;
    ignoreCookie?: pulumi.Input<boolean>;
    ignoreQueryParams?: pulumi.Input<boolean>;
    proxyCacheMethodsSet?: pulumi.Input<boolean>;
    queryParamsBlacklists?: pulumi.Input<pulumi.Input<string>[]>;
    queryParamsWhitelists?: pulumi.Input<pulumi.Input<string>[]>;
    redirectHttpToHttps?: pulumi.Input<boolean>;
    redirectHttpsToHttp?: pulumi.Input<boolean>;
    slice?: pulumi.Input<boolean>;
    staticRequestHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    staticResponseHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GetCdnResourceSslCertificate {
    certificateManagerId?: string;
    status?: string;
    type: string;
}

export interface GetCdnResourceSslCertificateArgs {
    certificateManagerId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface GetComputeDiskDiskPlacementPolicy {
    diskPlacementGroupId: string;
}

export interface GetComputeDiskDiskPlacementPolicyArgs {
    diskPlacementGroupId: pulumi.Input<string>;
}

export interface GetComputeInstanceLocalDiskArgs {
    deviceName?: pulumi.Input<string>;
    sizeBytes: pulumi.Input<number>;
}

export interface GetComputeInstanceLocalDisk {
    deviceName?: string;
    sizeBytes: number;
}

export interface GetComputeInstancePlacementPolicy {
    hostAffinityRules?: inputs.GetComputeInstancePlacementPolicyHostAffinityRule[];
    placementGroupId?: string;
}

export interface GetComputeInstancePlacementPolicyArgs {
    hostAffinityRules?: pulumi.Input<pulumi.Input<inputs.GetComputeInstancePlacementPolicyHostAffinityRuleArgs>[]>;
    placementGroupId?: pulumi.Input<string>;
}

export interface GetComputeInstancePlacementPolicyHostAffinityRule {
    key: string;
    op: string;
    values: string[];
}

export interface GetComputeInstancePlacementPolicyHostAffinityRuleArgs {
    key: pulumi.Input<string>;
    op: pulumi.Input<string>;
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetFunctionScalingPolicyPolicy {
    tag?: string;
    zoneInstancesLimit?: number;
    zoneRequestsLimit?: number;
}

export interface GetFunctionScalingPolicyPolicyArgs {
    tag?: pulumi.Input<string>;
    zoneInstancesLimit?: pulumi.Input<number>;
    zoneRequestsLimit?: pulumi.Input<number>;
}

export interface GetFunctionSecret {
    environmentVariable: string;
    id: string;
    key: string;
    versionId: string;
}

export interface GetFunctionSecretArgs {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface GetIamPolicyBinding {
    members: string[];
    role: string;
}

export interface GetIamPolicyBindingArgs {
    members: pulumi.Input<pulumi.Input<string>[]>;
    role: pulumi.Input<string>;
}

export interface GetMdbClickhouseClusterCloudStorage {
    enabled: boolean;
}

export interface GetMdbClickhouseClusterCloudStorageArgs {
    enabled: pulumi.Input<boolean>;
}

export interface GetMdbGreenplumClusterPoolerConfig {
    poolClientIdleTimeout?: number;
    poolSize?: number;
    poolingMode?: string;
}

export interface GetMdbGreenplumClusterPoolerConfigArgs {
    poolClientIdleTimeout?: pulumi.Input<number>;
    poolSize?: pulumi.Input<number>;
    poolingMode?: pulumi.Input<string>;
}

export interface GetMdbKafkaClusterConfig {
    access?: inputs.GetMdbKafkaClusterConfigAccess;
    assignPublicIp?: boolean;
    brokersCount?: number;
    kafka: inputs.GetMdbKafkaClusterConfigKafka;
    schemaRegistry?: boolean;
    unmanagedTopics?: boolean;
    version: string;
    zones: string[];
    zookeeper?: inputs.GetMdbKafkaClusterConfigZookeeper;
}

export interface GetMdbKafkaClusterConfigArgs {
    access?: pulumi.Input<inputs.GetMdbKafkaClusterConfigAccessArgs>;
    assignPublicIp?: pulumi.Input<boolean>;
    brokersCount?: pulumi.Input<number>;
    kafka: pulumi.Input<inputs.GetMdbKafkaClusterConfigKafkaArgs>;
    schemaRegistry?: pulumi.Input<boolean>;
    unmanagedTopics?: pulumi.Input<boolean>;
    version: pulumi.Input<string>;
    zones: pulumi.Input<pulumi.Input<string>[]>;
    zookeeper?: pulumi.Input<inputs.GetMdbKafkaClusterConfigZookeeperArgs>;
}

export interface GetMdbKafkaClusterConfigAccess {
    dataTransfer?: boolean;
}

export interface GetMdbKafkaClusterConfigAccessArgs {
    dataTransfer?: pulumi.Input<boolean>;
}

export interface GetMdbKafkaClusterConfigKafka {
    kafkaConfig?: inputs.GetMdbKafkaClusterConfigKafkaKafkaConfig;
    resources: inputs.GetMdbKafkaClusterConfigKafkaResources;
}

export interface GetMdbKafkaClusterConfigKafkaArgs {
    kafkaConfig?: pulumi.Input<inputs.GetMdbKafkaClusterConfigKafkaKafkaConfigArgs>;
    resources: pulumi.Input<inputs.GetMdbKafkaClusterConfigKafkaResourcesArgs>;
}

export interface GetMdbKafkaClusterConfigKafkaKafkaConfig {
    autoCreateTopicsEnable?: boolean;
    compressionType?: string;
    defaultReplicationFactor?: string;
    logFlushIntervalMessages?: string;
    logFlushIntervalMs?: string;
    logFlushSchedulerIntervalMs?: string;
    logPreallocate?: boolean;
    logRetentionBytes?: string;
    logRetentionHours?: string;
    logRetentionMinutes?: string;
    logRetentionMs?: string;
    logSegmentBytes?: string;
    messageMaxBytes?: string;
    numPartitions?: string;
    offsetsRetentionMinutes?: string;
    replicaFetchMaxBytes?: string;
    socketReceiveBufferBytes?: string;
    socketSendBufferBytes?: string;
    sslCipherSuites?: string[];
}

export interface GetMdbKafkaClusterConfigKafkaKafkaConfigArgs {
    autoCreateTopicsEnable?: pulumi.Input<boolean>;
    compressionType?: pulumi.Input<string>;
    defaultReplicationFactor?: pulumi.Input<string>;
    logFlushIntervalMessages?: pulumi.Input<string>;
    logFlushIntervalMs?: pulumi.Input<string>;
    logFlushSchedulerIntervalMs?: pulumi.Input<string>;
    logPreallocate?: pulumi.Input<boolean>;
    logRetentionBytes?: pulumi.Input<string>;
    logRetentionHours?: pulumi.Input<string>;
    logRetentionMinutes?: pulumi.Input<string>;
    logRetentionMs?: pulumi.Input<string>;
    logSegmentBytes?: pulumi.Input<string>;
    messageMaxBytes?: pulumi.Input<string>;
    numPartitions?: pulumi.Input<string>;
    offsetsRetentionMinutes?: pulumi.Input<string>;
    replicaFetchMaxBytes?: pulumi.Input<string>;
    socketReceiveBufferBytes?: pulumi.Input<string>;
    socketSendBufferBytes?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbKafkaClusterConfigKafkaResources {
    diskSize: number;
    diskTypeId: string;
    resourcePresetId: string;
}

export interface GetMdbKafkaClusterConfigKafkaResourcesArgs {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface GetMdbKafkaClusterConfigZookeeper {
    resources?: inputs.GetMdbKafkaClusterConfigZookeeperResources;
}

export interface GetMdbKafkaClusterConfigZookeeperArgs {
    resources?: pulumi.Input<inputs.GetMdbKafkaClusterConfigZookeeperResourcesArgs>;
}

export interface GetMdbKafkaClusterConfigZookeeperResourcesArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbKafkaClusterConfigZookeeperResources {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbKafkaClusterTopic {
    clusterId: string;
    name: string;
    partitions: number;
    replicationFactor: number;
    topicConfig?: inputs.GetMdbKafkaClusterTopicTopicConfig;
}

export interface GetMdbKafkaClusterTopicArgs {
    clusterId: pulumi.Input<string>;
    name: pulumi.Input<string>;
    partitions: pulumi.Input<number>;
    replicationFactor: pulumi.Input<number>;
    topicConfig?: pulumi.Input<inputs.GetMdbKafkaClusterTopicTopicConfigArgs>;
}

export interface GetMdbKafkaClusterTopicTopicConfigArgs {
    cleanupPolicy?: pulumi.Input<string>;
    compressionType?: pulumi.Input<string>;
    deleteRetentionMs?: pulumi.Input<string>;
    fileDeleteDelayMs?: pulumi.Input<string>;
    flushMessages?: pulumi.Input<string>;
    flushMs?: pulumi.Input<string>;
    maxMessageBytes?: pulumi.Input<string>;
    minCompactionLagMs?: pulumi.Input<string>;
    minInsyncReplicas?: pulumi.Input<string>;
    preallocate?: pulumi.Input<boolean>;
    retentionBytes?: pulumi.Input<string>;
    retentionMs?: pulumi.Input<string>;
    segmentBytes?: pulumi.Input<string>;
}

export interface GetMdbKafkaClusterTopicTopicConfig {
    cleanupPolicy?: string;
    compressionType?: string;
    deleteRetentionMs?: string;
    fileDeleteDelayMs?: string;
    flushMessages?: string;
    flushMs?: string;
    maxMessageBytes?: string;
    minCompactionLagMs?: string;
    minInsyncReplicas?: string;
    preallocate?: boolean;
    retentionBytes?: string;
    retentionMs?: string;
    segmentBytes?: string;
}

export interface GetMdbKafkaClusterUserArgs {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetMdbKafkaClusterUserPermissionArgs>[]>;
}

export interface GetMdbKafkaClusterUser {
    name: string;
    password: string;
    permissions?: inputs.GetMdbKafkaClusterUserPermission[];
}

export interface GetMdbKafkaClusterUserPermission {
    role: string;
    topicName: string;
}

export interface GetMdbKafkaClusterUserPermissionArgs {
    role: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterClusterConfig {
    access?: inputs.GetMdbMongodbClusterClusterConfigAccess;
    backupWindowStart?: inputs.GetMdbMongodbClusterClusterConfigBackupWindowStart;
    featureCompatibilityVersion?: string;
    mongod?: inputs.GetMdbMongodbClusterClusterConfigMongod;
    version?: string;
}

export interface GetMdbMongodbClusterClusterConfigArgs {
    access?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigAccessArgs>;
    backupWindowStart?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigBackupWindowStartArgs>;
    featureCompatibilityVersion?: pulumi.Input<string>;
    mongod?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodArgs>;
    version?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterClusterConfigAccessArgs {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
}

export interface GetMdbMongodbClusterClusterConfigAccess {
    dataLens?: boolean;
    dataTransfer?: boolean;
}

export interface GetMdbMongodbClusterClusterConfigBackupWindowStart {
    hours?: number;
    minutes?: number;
}

export interface GetMdbMongodbClusterClusterConfigBackupWindowStartArgs {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface GetMdbMongodbClusterClusterConfigMongod {
    auditLog?: inputs.GetMdbMongodbClusterClusterConfigMongodAuditLog;
    security?: inputs.GetMdbMongodbClusterClusterConfigMongodSecurity;
    setParameter?: inputs.GetMdbMongodbClusterClusterConfigMongodSetParameter;
}

export interface GetMdbMongodbClusterClusterConfigMongodArgs {
    auditLog?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodAuditLogArgs>;
    security?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodSecurityArgs>;
    setParameter?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodSetParameterArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongodAuditLog {
    filter?: string;
    runtimeConfiguration?: boolean;
}

export interface GetMdbMongodbClusterClusterConfigMongodAuditLogArgs {
    filter?: pulumi.Input<string>;
    runtimeConfiguration?: pulumi.Input<boolean>;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurity {
    enableEncryption?: boolean;
    kmip?: inputs.GetMdbMongodbClusterClusterConfigMongodSecurityKmip;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurityArgs {
    enableEncryption?: pulumi.Input<boolean>;
    kmip?: pulumi.Input<inputs.GetMdbMongodbClusterClusterConfigMongodSecurityKmipArgs>;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurityKmipArgs {
    clientCertificate?: pulumi.Input<string>;
    keyIdentifier?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serverCa?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterClusterConfigMongodSecurityKmip {
    clientCertificate?: string;
    keyIdentifier?: string;
    port?: number;
    serverCa?: string;
    serverName?: string;
}

export interface GetMdbMongodbClusterClusterConfigMongodSetParameter {
    auditAuthorizationSuccess?: boolean;
}

export interface GetMdbMongodbClusterClusterConfigMongodSetParameterArgs {
    auditAuthorizationSuccess?: pulumi.Input<boolean>;
}

export interface GetMdbMongodbClusterDatabase {
    name?: string;
}

export interface GetMdbMongodbClusterDatabaseArgs {
    name?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterHost {
    assignPublicIp?: boolean;
    health?: string;
    name?: string;
    role?: string;
    shardName?: string;
    subnetId?: string;
    type?: string;
    zoneId?: string;
}

export interface GetMdbMongodbClusterHostArgs {
    assignPublicIp?: pulumi.Input<boolean>;
    health?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    shardName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterMaintenanceWindow {
    day?: string;
    hour?: number;
    type?: string;
}

export interface GetMdbMongodbClusterMaintenanceWindowArgs {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterResources {
    diskSize?: number;
    diskTypeId?: string;
    resourcePresetId?: string;
}

export interface GetMdbMongodbClusterResourcesArgs {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface GetMdbMongodbClusterUser {
    name?: string;
    password?: string;
    permissions?: inputs.GetMdbMongodbClusterUserPermission[];
}

export interface GetMdbMongodbClusterUserArgs {
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.GetMdbMongodbClusterUserPermissionArgs>[]>;
}

export interface GetMdbMongodbClusterUserPermission {
    databaseName?: string;
    roles?: string[];
}

export interface GetMdbMongodbClusterUserPermissionArgs {
    databaseName?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface GetMdbMysqlClusterAccessArgs {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
}

export interface GetMdbMysqlClusterAccess {
    dataLens?: boolean;
    dataTransfer?: boolean;
    webSql?: boolean;
}

export interface GetServerlessContainerSecret {
    environmentVariable: string;
    id: string;
    key: string;
    versionId: string;
}

export interface GetServerlessContainerSecretArgs {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface KubernetesClusterKmsProvider {
    keyId?: pulumi.Input<string>;
}

export interface KubernetesClusterMaster {
    clusterCaCertificate?: pulumi.Input<string>;
    externalV4Address?: pulumi.Input<string>;
    externalV4Endpoint?: pulumi.Input<string>;
    internalV4Address?: pulumi.Input<string>;
    internalV4Endpoint?: pulumi.Input<string>;
    maintenancePolicy?: pulumi.Input<inputs.KubernetesClusterMasterMaintenancePolicy>;
    publicIp?: pulumi.Input<boolean>;
    regional?: pulumi.Input<inputs.KubernetesClusterMasterRegional>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    version?: pulumi.Input<string>;
    versionInfos?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterMasterVersionInfo>[]>;
    zonal?: pulumi.Input<inputs.KubernetesClusterMasterZonal>;
}

export interface KubernetesClusterMasterMaintenancePolicy {
    autoUpgrade: pulumi.Input<boolean>;
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterMasterMaintenancePolicyMaintenanceWindow>[]>;
}

export interface KubernetesClusterMasterMaintenancePolicyMaintenanceWindow {
    day?: pulumi.Input<string>;
    duration: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}

export interface KubernetesClusterMasterRegional {
    locations?: pulumi.Input<pulumi.Input<inputs.KubernetesClusterMasterRegionalLocation>[]>;
    region: pulumi.Input<string>;
}

export interface KubernetesClusterMasterRegionalLocation {
    subnetId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterMasterVersionInfo {
    currentVersion?: pulumi.Input<string>;
    newRevisionAvailable?: pulumi.Input<boolean>;
    newRevisionSummary?: pulumi.Input<string>;
    versionDeprecated?: pulumi.Input<boolean>;
}

export interface KubernetesClusterMasterZonal {
    subnetId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesClusterNetworkImplementation {
    cilium?: pulumi.Input<inputs.KubernetesClusterNetworkImplementationCilium>;
}

export interface KubernetesClusterNetworkImplementationCilium {
}

export interface KubernetesNodeGroupAllocationPolicy {
    locations?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupAllocationPolicyLocation>[]>;
}

export interface KubernetesNodeGroupAllocationPolicyLocation {
    /**
     * @deprecated The 'subnet_id' field has been deprecated. Please use 'subnet_ids under network_interface' instead.
     */
    subnetId?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface KubernetesNodeGroupDeployPolicy {
    maxExpansion: pulumi.Input<number>;
    maxUnavailable: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplate {
    bootDisk?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateBootDisk>;
    containerRuntime?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateContainerRuntime>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated The 'nat' field has been deprecated. Please use 'nat under network_interface' instead.
     */
    nat?: pulumi.Input<boolean>;
    networkAccelerationType?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateNetworkInterface>[]>;
    placementPolicy?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplatePlacementPolicy>;
    platformId?: pulumi.Input<string>;
    resources?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateResources>;
    schedulingPolicy?: pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateSchedulingPolicy>;
}

export interface KubernetesNodeGroupInstanceTemplateBootDisk {
    size?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
}

export interface KubernetesNodeGroupInstanceTemplateContainerRuntime {
    type: pulumi.Input<string>;
}

export interface KubernetesNodeGroupInstanceTemplateNetworkInterface {
    ipv4?: pulumi.Input<boolean>;
    ipv4DnsRecords?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord>[]>;
    ipv6?: pulumi.Input<boolean>;
    ipv6DnsRecords?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord>[]>;
    nat?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord {
    dnsZoneId?: pulumi.Input<string>;
    fqdn: pulumi.Input<string>;
    ptr?: pulumi.Input<boolean>;
    ttl?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplatePlacementPolicy {
    placementGroupId: pulumi.Input<string>;
}

export interface KubernetesNodeGroupInstanceTemplateResources {
    coreFraction?: pulumi.Input<number>;
    cores?: pulumi.Input<number>;
    gpus?: pulumi.Input<number>;
    memory?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupInstanceTemplateSchedulingPolicy {
    preemptible?: pulumi.Input<boolean>;
}

export interface KubernetesNodeGroupMaintenancePolicy {
    autoRepair: pulumi.Input<boolean>;
    autoUpgrade: pulumi.Input<boolean>;
    maintenanceWindows?: pulumi.Input<pulumi.Input<inputs.KubernetesNodeGroupMaintenancePolicyMaintenanceWindow>[]>;
}

export interface KubernetesNodeGroupMaintenancePolicyMaintenanceWindow {
    day?: pulumi.Input<string>;
    duration: pulumi.Input<string>;
    startTime: pulumi.Input<string>;
}

export interface KubernetesNodeGroupScalePolicy {
    autoScale?: pulumi.Input<inputs.KubernetesNodeGroupScalePolicyAutoScale>;
    fixedScale?: pulumi.Input<inputs.KubernetesNodeGroupScalePolicyFixedScale>;
}

export interface KubernetesNodeGroupScalePolicyAutoScale {
    initial: pulumi.Input<number>;
    max: pulumi.Input<number>;
    min: pulumi.Input<number>;
}

export interface KubernetesNodeGroupScalePolicyFixedScale {
    size?: pulumi.Input<number>;
}

export interface KubernetesNodeGroupVersionInfo {
    currentVersion?: pulumi.Input<string>;
    newRevisionAvailable?: pulumi.Input<boolean>;
    newRevisionSummary?: pulumi.Input<string>;
    versionDeprecated?: pulumi.Input<boolean>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroup {
    healthchecks: pulumi.Input<pulumi.Input<inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheck>[]>;
    targetGroupId: pulumi.Input<string>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroupHealthcheck {
    healthyThreshold?: pulumi.Input<number>;
    httpOptions?: pulumi.Input<inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions>;
    interval?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    tcpOptions?: pulumi.Input<inputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions>;
    timeout?: pulumi.Input<number>;
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions {
    path?: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions {
    port: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerListener {
    externalAddressSpec?: pulumi.Input<inputs.LbNetworkLoadBalancerListenerExternalAddressSpec>;
    internalAddressSpec?: pulumi.Input<inputs.LbNetworkLoadBalancerListenerInternalAddressSpec>;
    name: pulumi.Input<string>;
    port: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    targetPort?: pulumi.Input<number>;
}

export interface LbNetworkLoadBalancerListenerExternalAddressSpec {
    address?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
}

export interface LbNetworkLoadBalancerListenerInternalAddressSpec {
    address?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface LbTargetGroupTarget {
    address: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
}

export interface MdbClickhouseClusterAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    metrika?: pulumi.Input<boolean>;
    serverless?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
    yandexQuery?: pulumi.Input<boolean>;
}

export interface MdbClickhouseClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouse {
    config?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfig>;
    resources: pulumi.Input<inputs.MdbClickhouseClusterClickhouseResources>;
}

export interface MdbClickhouseClusterClickhouseConfig {
    backgroundPoolSize?: pulumi.Input<number>;
    backgroundSchedulePoolSize?: pulumi.Input<number>;
    compressions?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigCompression>[]>;
    geobaseUri?: pulumi.Input<string>;
    graphiteRollups?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollup>[]>;
    kafka?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigKafka>;
    kafkaTopics?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigKafkaTopic>[]>;
    keepAliveTimeout?: pulumi.Input<number>;
    logLevel?: pulumi.Input<string>;
    markCacheSize?: pulumi.Input<number>;
    maxConcurrentQueries?: pulumi.Input<number>;
    maxConnections?: pulumi.Input<number>;
    maxPartitionSizeToDrop?: pulumi.Input<number>;
    maxTableSizeToDrop?: pulumi.Input<number>;
    mergeTree?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigMergeTree>;
    metricLogEnabled?: pulumi.Input<boolean>;
    metricLogRetentionSize?: pulumi.Input<number>;
    metricLogRetentionTime?: pulumi.Input<number>;
    partLogRetentionSize?: pulumi.Input<number>;
    partLogRetentionTime?: pulumi.Input<number>;
    queryLogRetentionSize?: pulumi.Input<number>;
    queryLogRetentionTime?: pulumi.Input<number>;
    queryThreadLogEnabled?: pulumi.Input<boolean>;
    queryThreadLogRetentionSize?: pulumi.Input<number>;
    queryThreadLogRetentionTime?: pulumi.Input<number>;
    rabbitmq?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigRabbitmq>;
    textLogEnabled?: pulumi.Input<boolean>;
    textLogLevel?: pulumi.Input<string>;
    textLogRetentionSize?: pulumi.Input<number>;
    textLogRetentionTime?: pulumi.Input<number>;
    timezone?: pulumi.Input<string>;
    traceLogEnabled?: pulumi.Input<boolean>;
    traceLogRetentionSize?: pulumi.Input<number>;
    traceLogRetentionTime?: pulumi.Input<number>;
    uncompressedCacheSize?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigCompression {
    method: pulumi.Input<string>;
    minPartSize: pulumi.Input<number>;
    minPartSizeRatio: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigGraphiteRollup {
    name: pulumi.Input<string>;
    patterns?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern>[]>;
}

export interface MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern {
    function: pulumi.Input<string>;
    regexp?: pulumi.Input<string>;
    retentions?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention>[]>;
}

export interface MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention {
    age: pulumi.Input<number>;
    precision: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigKafka {
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterClickhouseConfigKafkaTopic {
    name: pulumi.Input<string>;
    settings?: pulumi.Input<inputs.MdbClickhouseClusterClickhouseConfigKafkaTopicSettings>;
}

export interface MdbClickhouseClusterClickhouseConfigKafkaTopicSettings {
    saslMechanism?: pulumi.Input<string>;
    saslPassword?: pulumi.Input<string>;
    saslUsername?: pulumi.Input<string>;
    securityProtocol?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterClickhouseConfigMergeTree {
    maxBytesToMergeAtMinSpaceInPool?: pulumi.Input<number>;
    maxReplicatedMergesInQueue?: pulumi.Input<number>;
    numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge?: pulumi.Input<number>;
    partsToDelayInsert?: pulumi.Input<number>;
    partsToThrowInsert?: pulumi.Input<number>;
    replicatedDeduplicationWindow?: pulumi.Input<number>;
    replicatedDeduplicationWindowSeconds?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterClickhouseConfigRabbitmq {
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface MdbClickhouseClusterClickhouseResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbClickhouseClusterCloudStorage {
    enabled: pulumi.Input<boolean>;
}

export interface MdbClickhouseClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbClickhouseClusterFormatSchema {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface MdbClickhouseClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    shardName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbClickhouseClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbClickhouseClusterMlModel {
    name: pulumi.Input<string>;
    type: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface MdbClickhouseClusterShardGroup {
    description?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    shardNames: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbClickhouseClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUserPermission>[]>;
    quotas?: pulumi.Input<pulumi.Input<inputs.MdbClickhouseClusterUserQuota>[]>;
    settings?: pulumi.Input<inputs.MdbClickhouseClusterUserSettings>;
}

export interface MdbClickhouseClusterUserPermission {
    databaseName: pulumi.Input<string>;
}

export interface MdbClickhouseClusterUserQuota {
    errors?: pulumi.Input<number>;
    executionTime?: pulumi.Input<number>;
    intervalDuration: pulumi.Input<number>;
    queries?: pulumi.Input<number>;
    readRows?: pulumi.Input<number>;
    resultRows?: pulumi.Input<number>;
}

export interface MdbClickhouseClusterUserSettings {
    addHttpCorsHeader?: pulumi.Input<boolean>;
    allowDdl?: pulumi.Input<boolean>;
    compile?: pulumi.Input<boolean>;
    compileExpressions?: pulumi.Input<boolean>;
    connectTimeout?: pulumi.Input<number>;
    countDistinctImplementation?: pulumi.Input<string>;
    distinctOverflowMode?: pulumi.Input<string>;
    distributedAggregationMemoryEfficient?: pulumi.Input<boolean>;
    distributedDdlTaskTimeout?: pulumi.Input<number>;
    distributedProductMode?: pulumi.Input<string>;
    emptyResultForAggregationByEmptySet?: pulumi.Input<boolean>;
    enableHttpCompression?: pulumi.Input<boolean>;
    fallbackToStaleReplicasForDistributedQueries?: pulumi.Input<boolean>;
    forceIndexByDate?: pulumi.Input<boolean>;
    forcePrimaryKey?: pulumi.Input<boolean>;
    groupByOverflowMode?: pulumi.Input<string>;
    groupByTwoLevelThreshold?: pulumi.Input<number>;
    groupByTwoLevelThresholdBytes?: pulumi.Input<number>;
    httpConnectionTimeout?: pulumi.Input<number>;
    httpHeadersProgressInterval?: pulumi.Input<number>;
    httpReceiveTimeout?: pulumi.Input<number>;
    httpSendTimeout?: pulumi.Input<number>;
    inputFormatDefaultsForOmittedFields?: pulumi.Input<boolean>;
    inputFormatValuesInterpretExpressions?: pulumi.Input<boolean>;
    insertQuorum?: pulumi.Input<number>;
    insertQuorumTimeout?: pulumi.Input<number>;
    joinOverflowMode?: pulumi.Input<string>;
    joinUseNulls?: pulumi.Input<boolean>;
    joinedSubqueryRequiresAlias?: pulumi.Input<boolean>;
    lowCardinalityAllowInNativeFormat?: pulumi.Input<boolean>;
    maxAstDepth?: pulumi.Input<number>;
    maxAstElements?: pulumi.Input<number>;
    maxBlockSize?: pulumi.Input<number>;
    maxBytesBeforeExternalGroupBy?: pulumi.Input<number>;
    maxBytesBeforeExternalSort?: pulumi.Input<number>;
    maxBytesInDistinct?: pulumi.Input<number>;
    maxBytesInJoin?: pulumi.Input<number>;
    maxBytesInSet?: pulumi.Input<number>;
    maxBytesToRead?: pulumi.Input<number>;
    maxBytesToSort?: pulumi.Input<number>;
    maxBytesToTransfer?: pulumi.Input<number>;
    maxColumnsToRead?: pulumi.Input<number>;
    maxExecutionTime?: pulumi.Input<number>;
    maxExpandedAstElements?: pulumi.Input<number>;
    maxInsertBlockSize?: pulumi.Input<number>;
    maxMemoryUsage?: pulumi.Input<number>;
    maxMemoryUsageForUser?: pulumi.Input<number>;
    maxNetworkBandwidth?: pulumi.Input<number>;
    maxNetworkBandwidthForUser?: pulumi.Input<number>;
    maxQuerySize?: pulumi.Input<number>;
    maxReplicaDelayForDistributedQueries?: pulumi.Input<number>;
    maxResultBytes?: pulumi.Input<number>;
    maxResultRows?: pulumi.Input<number>;
    maxRowsInDistinct?: pulumi.Input<number>;
    maxRowsInJoin?: pulumi.Input<number>;
    maxRowsInSet?: pulumi.Input<number>;
    maxRowsToGroupBy?: pulumi.Input<number>;
    maxRowsToRead?: pulumi.Input<number>;
    maxRowsToSort?: pulumi.Input<number>;
    maxRowsToTransfer?: pulumi.Input<number>;
    maxTemporaryColumns?: pulumi.Input<number>;
    maxTemporaryNonConstColumns?: pulumi.Input<number>;
    maxThreads?: pulumi.Input<number>;
    mergeTreeMaxBytesToUseCache?: pulumi.Input<number>;
    mergeTreeMaxRowsToUseCache?: pulumi.Input<number>;
    mergeTreeMinBytesForConcurrentRead?: pulumi.Input<number>;
    mergeTreeMinRowsForConcurrentRead?: pulumi.Input<number>;
    minBytesToUseDirectIo?: pulumi.Input<number>;
    minCountToCompile?: pulumi.Input<number>;
    minCountToCompileExpression?: pulumi.Input<number>;
    minExecutionSpeed?: pulumi.Input<number>;
    minExecutionSpeedBytes?: pulumi.Input<number>;
    minInsertBlockSizeBytes?: pulumi.Input<number>;
    minInsertBlockSizeRows?: pulumi.Input<number>;
    outputFormatJsonQuote64bitIntegers?: pulumi.Input<boolean>;
    outputFormatJsonQuoteDenormals?: pulumi.Input<boolean>;
    priority?: pulumi.Input<number>;
    quotaMode?: pulumi.Input<string>;
    readOverflowMode?: pulumi.Input<string>;
    readonly?: pulumi.Input<number>;
    receiveTimeout?: pulumi.Input<number>;
    replicationAlterPartitionsSync?: pulumi.Input<number>;
    resultOverflowMode?: pulumi.Input<string>;
    selectSequentialConsistency?: pulumi.Input<boolean>;
    sendProgressInHttpHeaders?: pulumi.Input<boolean>;
    sendTimeout?: pulumi.Input<number>;
    setOverflowMode?: pulumi.Input<string>;
    skipUnavailableShards?: pulumi.Input<boolean>;
    sortOverflowMode?: pulumi.Input<string>;
    timeoutOverflowMode?: pulumi.Input<string>;
    transferOverflowMode?: pulumi.Input<string>;
    transformNullIn?: pulumi.Input<boolean>;
    useUncompressedCache?: pulumi.Input<boolean>;
}

export interface MdbClickhouseClusterZookeeper {
    resources?: pulumi.Input<inputs.MdbClickhouseClusterZookeeperResources>;
}

export interface MdbClickhouseClusterZookeeperResources {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface MdbElasticSearchClusterConfig {
    adminPassword: pulumi.Input<string>;
    dataNode: pulumi.Input<inputs.MdbElasticSearchClusterConfigDataNode>;
    edition?: pulumi.Input<string>;
    masterNode?: pulumi.Input<inputs.MdbElasticSearchClusterConfigMasterNode>;
    plugins?: pulumi.Input<pulumi.Input<string>[]>;
    version?: pulumi.Input<string>;
}

export interface MdbElasticSearchClusterConfigDataNode {
    resources: pulumi.Input<inputs.MdbElasticSearchClusterConfigDataNodeResources>;
}

export interface MdbElasticSearchClusterConfigDataNodeResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbElasticSearchClusterConfigMasterNode {
    resources: pulumi.Input<inputs.MdbElasticSearchClusterConfigMasterNodeResources>;
}

export interface MdbElasticSearchClusterConfigMasterNodeResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbElasticSearchClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbElasticSearchClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbGreenplumClusterAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
}

export interface MdbGreenplumClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbGreenplumClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbGreenplumClusterMasterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
}

export interface MdbGreenplumClusterMasterSubcluster {
    resources: pulumi.Input<inputs.MdbGreenplumClusterMasterSubclusterResources>;
}

export interface MdbGreenplumClusterMasterSubclusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbGreenplumClusterPoolerConfig {
    poolClientIdleTimeout?: pulumi.Input<number>;
    poolSize?: pulumi.Input<number>;
    poolingMode?: pulumi.Input<string>;
}

export interface MdbGreenplumClusterSegmentHost {
    fqdn?: pulumi.Input<string>;
}

export interface MdbGreenplumClusterSegmentSubcluster {
    resources: pulumi.Input<inputs.MdbGreenplumClusterSegmentSubclusterResources>;
}

export interface MdbGreenplumClusterSegmentSubclusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbKafkaClusterConfig {
    access?: pulumi.Input<inputs.MdbKafkaClusterConfigAccess>;
    assignPublicIp?: pulumi.Input<boolean>;
    brokersCount?: pulumi.Input<number>;
    kafka: pulumi.Input<inputs.MdbKafkaClusterConfigKafka>;
    schemaRegistry?: pulumi.Input<boolean>;
    unmanagedTopics?: pulumi.Input<boolean>;
    version: pulumi.Input<string>;
    zones: pulumi.Input<pulumi.Input<string>[]>;
    zookeeper?: pulumi.Input<inputs.MdbKafkaClusterConfigZookeeper>;
}

export interface MdbKafkaClusterConfigAccess {
    dataTransfer?: pulumi.Input<boolean>;
}

export interface MdbKafkaClusterConfigKafka {
    kafkaConfig?: pulumi.Input<inputs.MdbKafkaClusterConfigKafkaKafkaConfig>;
    resources: pulumi.Input<inputs.MdbKafkaClusterConfigKafkaResources>;
}

export interface MdbKafkaClusterConfigKafkaKafkaConfig {
    autoCreateTopicsEnable?: pulumi.Input<boolean>;
    compressionType?: pulumi.Input<string>;
    defaultReplicationFactor?: pulumi.Input<string>;
    logFlushIntervalMessages?: pulumi.Input<string>;
    logFlushIntervalMs?: pulumi.Input<string>;
    logFlushSchedulerIntervalMs?: pulumi.Input<string>;
    logPreallocate?: pulumi.Input<boolean>;
    logRetentionBytes?: pulumi.Input<string>;
    logRetentionHours?: pulumi.Input<string>;
    logRetentionMinutes?: pulumi.Input<string>;
    logRetentionMs?: pulumi.Input<string>;
    logSegmentBytes?: pulumi.Input<string>;
    messageMaxBytes?: pulumi.Input<string>;
    numPartitions?: pulumi.Input<string>;
    offsetsRetentionMinutes?: pulumi.Input<string>;
    replicaFetchMaxBytes?: pulumi.Input<string>;
    socketReceiveBufferBytes?: pulumi.Input<string>;
    socketSendBufferBytes?: pulumi.Input<string>;
    sslCipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbKafkaClusterConfigKafkaResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbKafkaClusterConfigZookeeper {
    resources?: pulumi.Input<inputs.MdbKafkaClusterConfigZookeeperResources>;
}

export interface MdbKafkaClusterConfigZookeeperResources {
    diskSize?: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId?: pulumi.Input<string>;
}

export interface MdbKafkaClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    health?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface MdbKafkaClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbKafkaClusterTopic {
    name: pulumi.Input<string>;
    partitions: pulumi.Input<number>;
    replicationFactor: pulumi.Input<number>;
    topicConfig?: pulumi.Input<inputs.MdbKafkaClusterTopicTopicConfig>;
}

export interface MdbKafkaClusterTopicTopicConfig {
    cleanupPolicy?: pulumi.Input<string>;
    compressionType?: pulumi.Input<string>;
    deleteRetentionMs?: pulumi.Input<string>;
    fileDeleteDelayMs?: pulumi.Input<string>;
    flushMessages?: pulumi.Input<string>;
    flushMs?: pulumi.Input<string>;
    maxMessageBytes?: pulumi.Input<string>;
    minCompactionLagMs?: pulumi.Input<string>;
    minInsyncReplicas?: pulumi.Input<string>;
    preallocate?: pulumi.Input<boolean>;
    retentionBytes?: pulumi.Input<string>;
    retentionMs?: pulumi.Input<string>;
    segmentBytes?: pulumi.Input<string>;
}

export interface MdbKafkaClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbKafkaClusterUserPermission>[]>;
}

export interface MdbKafkaClusterUserPermission {
    role: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}

export interface MdbKafkaTopicTopicConfig {
    cleanupPolicy?: pulumi.Input<string>;
    compressionType?: pulumi.Input<string>;
    deleteRetentionMs?: pulumi.Input<string>;
    fileDeleteDelayMs?: pulumi.Input<string>;
    flushMessages?: pulumi.Input<string>;
    flushMs?: pulumi.Input<string>;
    maxMessageBytes?: pulumi.Input<string>;
    minCompactionLagMs?: pulumi.Input<string>;
    minInsyncReplicas?: pulumi.Input<string>;
    preallocate?: pulumi.Input<boolean>;
    retentionBytes?: pulumi.Input<string>;
    retentionMs?: pulumi.Input<string>;
    segmentBytes?: pulumi.Input<string>;
}

export interface MdbMongodbClusterClusterConfig {
    access?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigAccess>;
    backupWindowStart?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigBackupWindowStart>;
    featureCompatibilityVersion?: pulumi.Input<string>;
    mongod?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongod>;
    version: pulumi.Input<string>;
}

export interface MdbMongodbClusterClusterConfigAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
}

export interface MdbMongodbClusterClusterConfigBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbMongodbClusterClusterConfigMongod {
    auditLog?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodAuditLog>;
    security?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodSecurity>;
    setParameter?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodSetParameter>;
}

export interface MdbMongodbClusterClusterConfigMongodAuditLog {
    filter?: pulumi.Input<string>;
    runtimeConfiguration?: pulumi.Input<boolean>;
}

export interface MdbMongodbClusterClusterConfigMongodSecurity {
    enableEncryption?: pulumi.Input<boolean>;
    kmip?: pulumi.Input<inputs.MdbMongodbClusterClusterConfigMongodSecurityKmip>;
}

export interface MdbMongodbClusterClusterConfigMongodSecurityKmip {
    clientCertificate?: pulumi.Input<string>;
    keyIdentifier?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    serverCa?: pulumi.Input<string>;
    serverName?: pulumi.Input<string>;
}

export interface MdbMongodbClusterClusterConfigMongodSetParameter {
    auditAuthorizationSuccess?: pulumi.Input<boolean>;
}

export interface MdbMongodbClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbMongodbClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    health?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    shardName?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}

export interface MdbMongodbClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbMongodbClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMongodbClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbMongodbClusterUserPermission>[]>;
}

export interface MdbMongodbClusterUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbMysqlClusterAccess {
    dataLens?: pulumi.Input<boolean>;
    dataTransfer?: pulumi.Input<boolean>;
    webSql?: pulumi.Input<boolean>;
}

export interface MdbMysqlClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbMysqlClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbMysqlClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    backupPriority?: pulumi.Input<number>;
    fqdn?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    replicationSource?: pulumi.Input<string>;
    replicationSourceName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbMysqlClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbMysqlClusterPerformanceDiagnostics {
    enabled?: pulumi.Input<boolean>;
    sessionsSamplingInterval: pulumi.Input<number>;
    statementsSamplingInterval: pulumi.Input<number>;
}

export interface MdbMysqlClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbMysqlClusterRestore {
    backupId: pulumi.Input<string>;
    time?: pulumi.Input<string>;
}

export interface MdbMysqlClusterUser {
    authenticationPlugin?: pulumi.Input<string>;
    connectionLimits?: pulumi.Input<inputs.MdbMysqlClusterUserConnectionLimits>;
    globalPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbMysqlClusterUserPermission>[]>;
}

export interface MdbMysqlClusterUserConnectionLimits {
    maxConnectionsPerHour?: pulumi.Input<number>;
    maxQuestionsPerHour?: pulumi.Input<number>;
    maxUpdatesPerHour?: pulumi.Input<number>;
    maxUserConnections?: pulumi.Input<number>;
}

export interface MdbMysqlClusterUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MdbRedisClusterConfig {
    clientOutputBufferLimitNormal?: pulumi.Input<string>;
    clientOutputBufferLimitPubsub?: pulumi.Input<string>;
    databases?: pulumi.Input<number>;
    maxmemoryPolicy?: pulumi.Input<string>;
    notifyKeyspaceEvents?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    slowlogLogSlowerThan?: pulumi.Input<number>;
    slowlogMaxLen?: pulumi.Input<number>;
    timeout?: pulumi.Input<number>;
    version: pulumi.Input<string>;
}

export interface MdbRedisClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    replicaPriority?: pulumi.Input<number>;
    shardName?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbRedisClusterMaintenanceWindow {
    day?: pulumi.Input<string>;
    hour?: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface MdbRedisClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId?: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbSqlServerClusterBackupWindowStart {
    hours?: pulumi.Input<number>;
    minutes?: pulumi.Input<number>;
}

export interface MdbSqlServerClusterDatabase {
    name: pulumi.Input<string>;
}

export interface MdbSqlServerClusterHost {
    assignPublicIp?: pulumi.Input<boolean>;
    fqdn?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    zone: pulumi.Input<string>;
}

export interface MdbSqlServerClusterResources {
    diskSize: pulumi.Input<number>;
    diskTypeId: pulumi.Input<string>;
    resourcePresetId: pulumi.Input<string>;
}

export interface MdbSqlServerClusterUser {
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<inputs.MdbSqlServerClusterUserPermission>[]>;
}

export interface MdbSqlServerClusterUserPermission {
    databaseName: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface OrganizationmanagerSamlFederationSecuritySettings {
    encryptedAssertions: pulumi.Input<boolean>;
}

export interface ServerlessContainerImage {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    digest?: pulumi.Input<string>;
    environment?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    url: pulumi.Input<string>;
    workDir?: pulumi.Input<string>;
}

export interface ServerlessContainerSecret {
    environmentVariable: pulumi.Input<string>;
    id: pulumi.Input<string>;
    key: pulumi.Input<string>;
    versionId: pulumi.Input<string>;
}

export interface StorageBucketAnonymousAccessFlags {
    list?: pulumi.Input<boolean>;
    read?: pulumi.Input<boolean>;
}

export interface StorageBucketCorsRule {
    allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
    allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    maxAgeSeconds?: pulumi.Input<number>;
}

export interface StorageBucketGrant {
    id?: pulumi.Input<string>;
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    type: pulumi.Input<string>;
    uri?: pulumi.Input<string>;
}

export interface StorageBucketHttps {
    certificateId: pulumi.Input<string>;
}

export interface StorageBucketLifecycleRule {
    abortIncompleteMultipartUploadDays?: pulumi.Input<number>;
    enabled: pulumi.Input<boolean>;
    expiration?: pulumi.Input<inputs.StorageBucketLifecycleRuleExpiration>;
    id?: pulumi.Input<string>;
    noncurrentVersionExpiration?: pulumi.Input<inputs.StorageBucketLifecycleRuleNoncurrentVersionExpiration>;
    noncurrentVersionTransitions?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRuleNoncurrentVersionTransition>[]>;
    prefix?: pulumi.Input<string>;
    transitions?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRuleTransition>[]>;
}

export interface StorageBucketLifecycleRuleExpiration {
    date?: pulumi.Input<string>;
    days?: pulumi.Input<number>;
    expiredObjectDeleteMarker?: pulumi.Input<boolean>;
}

export interface StorageBucketLifecycleRuleNoncurrentVersionExpiration {
    days?: pulumi.Input<number>;
}

export interface StorageBucketLifecycleRuleNoncurrentVersionTransition {
    days?: pulumi.Input<number>;
    storageClass: pulumi.Input<string>;
}

export interface StorageBucketLifecycleRuleTransition {
    date?: pulumi.Input<string>;
    days?: pulumi.Input<number>;
    storageClass: pulumi.Input<string>;
}

export interface StorageBucketLogging {
    targetBucket: pulumi.Input<string>;
    targetPrefix?: pulumi.Input<string>;
}

export interface StorageBucketServerSideEncryptionConfiguration {
    rule: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfigurationRule>;
}

export interface StorageBucketServerSideEncryptionConfigurationRule {
    applyServerSideEncryptionByDefault: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault>;
}

export interface StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
    kmsMasterKeyId: pulumi.Input<string>;
    sseAlgorithm: pulumi.Input<string>;
}

export interface StorageBucketVersioning {
    enabled?: pulumi.Input<boolean>;
}

export interface StorageBucketWebsite {
    errorDocument?: pulumi.Input<string>;
    indexDocument?: pulumi.Input<string>;
    redirectAllRequestsTo?: pulumi.Input<string>;
    routingRules?: pulumi.Input<string>;
}

export interface VpcAddressExternalIpv4Address {
    address?: pulumi.Input<string>;
    ddosProtectionProvider?: pulumi.Input<string>;
    outgoingSmtpCapability?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

export interface VpcDefaultSecurityGroupEgress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcDefaultSecurityGroupIngress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcRouteTableStaticRoute {
    destinationPrefix?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    nextHopAddress?: pulumi.Input<string>;
}

export interface VpcSecurityGroupEgress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcSecurityGroupIngress {
    description?: pulumi.Input<string>;
    fromPort?: pulumi.Input<number>;
    id?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    port?: pulumi.Input<number>;
    predefinedTarget?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    toPort?: pulumi.Input<number>;
    v4CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    v6CidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface VpcSubnetDhcpOptions {
    domainName?: pulumi.Input<string>;
    domainNameServers?: pulumi.Input<pulumi.Input<string>[]>;
    ntpServers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface YdbDatabaseDedicatedLocation {
    region?: pulumi.Input<inputs.YdbDatabaseDedicatedLocationRegion>;
}

export interface YdbDatabaseDedicatedLocationRegion {
    id: pulumi.Input<string>;
}

export interface YdbDatabaseDedicatedScalePolicy {
    fixedScale: pulumi.Input<inputs.YdbDatabaseDedicatedScalePolicyFixedScale>;
}

export interface YdbDatabaseDedicatedScalePolicyFixedScale {
    size: pulumi.Input<number>;
}

export interface YdbDatabaseDedicatedStorageConfig {
    groupCount: pulumi.Input<number>;
    storageTypeId: pulumi.Input<string>;
}

