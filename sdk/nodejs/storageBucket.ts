// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class StorageBucket extends pulumi.CustomResource {
    /**
     * Get an existing StorageBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageBucketState, opts?: pulumi.CustomResourceOptions): StorageBucket {
        return new StorageBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/storageBucket:StorageBucket';

    /**
     * Returns true if the given object is an instance of StorageBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageBucket.__pulumiType;
    }

    public readonly accessKey!: pulumi.Output<string | undefined>;
    public readonly acl!: pulumi.Output<string | undefined>;
    public readonly anonymousAccessFlags!: pulumi.Output<outputs.StorageBucketAnonymousAccessFlags>;
    public readonly bucket!: pulumi.Output<string>;
    public /*out*/ readonly bucketDomainName!: pulumi.Output<string>;
    public readonly bucketPrefix!: pulumi.Output<string | undefined>;
    public readonly corsRules!: pulumi.Output<outputs.StorageBucketCorsRule[] | undefined>;
    public readonly defaultStorageClass!: pulumi.Output<string>;
    public readonly folderId!: pulumi.Output<string>;
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly grants!: pulumi.Output<outputs.StorageBucketGrant[] | undefined>;
    public readonly https!: pulumi.Output<outputs.StorageBucketHttps | undefined>;
    public readonly lifecycleRules!: pulumi.Output<outputs.StorageBucketLifecycleRule[] | undefined>;
    public readonly loggings!: pulumi.Output<outputs.StorageBucketLogging[] | undefined>;
    public readonly maxSize!: pulumi.Output<number | undefined>;
    public readonly policy!: pulumi.Output<string | undefined>;
    public readonly secretKey!: pulumi.Output<string | undefined>;
    public readonly serverSideEncryptionConfiguration!: pulumi.Output<outputs.StorageBucketServerSideEncryptionConfiguration | undefined>;
    public readonly versioning!: pulumi.Output<outputs.StorageBucketVersioning>;
    public readonly website!: pulumi.Output<outputs.StorageBucketWebsite | undefined>;
    public readonly websiteDomain!: pulumi.Output<string>;
    public readonly websiteEndpoint!: pulumi.Output<string>;

    /**
     * Create a StorageBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StorageBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageBucketArgs | StorageBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageBucketState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["anonymousAccessFlags"] = state ? state.anonymousAccessFlags : undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["bucketPrefix"] = state ? state.bucketPrefix : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["defaultStorageClass"] = state ? state.defaultStorageClass : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["grants"] = state ? state.grants : undefined;
            resourceInputs["https"] = state ? state.https : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["loggings"] = state ? state.loggings : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = state ? state.serverSideEncryptionConfiguration : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
            resourceInputs["website"] = state ? state.website : undefined;
            resourceInputs["websiteDomain"] = state ? state.websiteDomain : undefined;
            resourceInputs["websiteEndpoint"] = state ? state.websiteEndpoint : undefined;
        } else {
            const args = argsOrState as StorageBucketArgs | undefined;
            resourceInputs["accessKey"] = args ? args.accessKey : undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["anonymousAccessFlags"] = args ? args.anonymousAccessFlags : undefined;
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["bucketPrefix"] = args ? args.bucketPrefix : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["defaultStorageClass"] = args ? args.defaultStorageClass : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["grants"] = args ? args.grants : undefined;
            resourceInputs["https"] = args ? args.https : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["loggings"] = args ? args.loggings : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["secretKey"] = args ? args.secretKey : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = args ? args.serverSideEncryptionConfiguration : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["website"] = args ? args.website : undefined;
            resourceInputs["websiteDomain"] = args ? args.websiteDomain : undefined;
            resourceInputs["websiteEndpoint"] = args ? args.websiteEndpoint : undefined;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageBucket resources.
 */
export interface StorageBucketState {
    accessKey?: pulumi.Input<string>;
    acl?: pulumi.Input<string>;
    anonymousAccessFlags?: pulumi.Input<inputs.StorageBucketAnonymousAccessFlags>;
    bucket?: pulumi.Input<string>;
    bucketDomainName?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketCorsRule>[]>;
    defaultStorageClass?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    grants?: pulumi.Input<pulumi.Input<inputs.StorageBucketGrant>[]>;
    https?: pulumi.Input<inputs.StorageBucketHttps>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.StorageBucketLogging>[]>;
    maxSize?: pulumi.Input<number>;
    policy?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfiguration>;
    versioning?: pulumi.Input<inputs.StorageBucketVersioning>;
    website?: pulumi.Input<inputs.StorageBucketWebsite>;
    websiteDomain?: pulumi.Input<string>;
    websiteEndpoint?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageBucket resource.
 */
export interface StorageBucketArgs {
    accessKey?: pulumi.Input<string>;
    acl?: pulumi.Input<string>;
    anonymousAccessFlags?: pulumi.Input<inputs.StorageBucketAnonymousAccessFlags>;
    bucket?: pulumi.Input<string>;
    bucketPrefix?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketCorsRule>[]>;
    defaultStorageClass?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    grants?: pulumi.Input<pulumi.Input<inputs.StorageBucketGrant>[]>;
    https?: pulumi.Input<inputs.StorageBucketHttps>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.StorageBucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.StorageBucketLogging>[]>;
    maxSize?: pulumi.Input<number>;
    policy?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.StorageBucketServerSideEncryptionConfiguration>;
    versioning?: pulumi.Input<inputs.StorageBucketVersioning>;
    website?: pulumi.Input<inputs.StorageBucketWebsite>;
    websiteDomain?: pulumi.Input<string>;
    websiteEndpoint?: pulumi.Input<string>;
}
