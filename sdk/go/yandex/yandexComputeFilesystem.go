// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// File storage is a virtual file system that can be attached to multiple Compute Cloud VMs in the same availability zone.
//
// Users can share files in storage and use them from different VMs.
//
// Storage is attached to a VM through the [Filesystem in Userspace](https://en.wikipedia.org/wiki/Filesystem_in_Userspace) (FUSE) interface as a [virtiofs](https://www.kernel.org/doc/html/latest/filesystems/virtiofs.html) device that is not linked to the host file system directly.
//
// For more information about filesystems in Yandex.Cloud, see:
//
// * [Documentation](https://cloud.yandex.com/docs/compute/concepts/filesystem)
// * How-to Guides
//   - [Attach filesystem to a VM](https://cloud.yandex.com/en-ru/docs/compute/operations/filesystem/attach-to-vm)
//   - [Detach filesystem from VM](https://cloud.yandex.com/en-ru/docs/compute/operations/filesystem/detach-from-vm)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.NewyandexComputeFilesystem(ctx, "default", &yandex.yandexComputeFilesystemArgs{
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("test"),
//				},
//				Size: pulumi.Int(10),
//				Type: pulumi.String("network-ssd"),
//				Zone: pulumi.String("ru-central1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # A filesystem can be imported using any of these accepted formats
//
// ```sh
//
//	$ pulumi import yandex:index/yandexComputeFilesystem:yandexComputeFilesystem default filesystem_id
//
// ```
type YandexComputeFilesystem struct {
	pulumi.CustomResourceState

	// Block size of the filesystem, specified in bytes.
	BlockSize pulumi.IntPtrOutput `pulumi:"blockSize"`
	// Creation timestamp of the filesystem.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the filesystem. Provide this property when you create a resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the filesystem. Provide this property when you create a resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Size of the filesystem, specified in GB.
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// The status of the filesystem.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Availability zone where the filesystem will reside.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewYandexComputeFilesystem registers a new resource with the given unique name, arguments, and options.
func NewYandexComputeFilesystem(ctx *pulumi.Context,
	name string, args *YandexComputeFilesystemArgs, opts ...pulumi.ResourceOption) (*YandexComputeFilesystem, error) {
	if args == nil {
		args = &YandexComputeFilesystemArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource YandexComputeFilesystem
	err := ctx.RegisterResource("yandex:index/yandexComputeFilesystem:yandexComputeFilesystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetYandexComputeFilesystem gets an existing YandexComputeFilesystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetYandexComputeFilesystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *YandexComputeFilesystemState, opts ...pulumi.ResourceOption) (*YandexComputeFilesystem, error) {
	var resource YandexComputeFilesystem
	err := ctx.ReadResource("yandex:index/yandexComputeFilesystem:yandexComputeFilesystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering YandexComputeFilesystem resources.
type yandexComputeFilesystemState struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize *int `pulumi:"blockSize"`
	// Creation timestamp of the filesystem.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the filesystem. Provide this property when you create a resource.
	Description *string `pulumi:"description"`
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels map[string]string `pulumi:"labels"`
	// Name of the filesystem. Provide this property when you create a resource.
	Name *string `pulumi:"name"`
	// Size of the filesystem, specified in GB.
	Size *int `pulumi:"size"`
	// The status of the filesystem.
	Status *string `pulumi:"status"`
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type *string `pulumi:"type"`
	// Availability zone where the filesystem will reside.
	Zone *string `pulumi:"zone"`
}

type YandexComputeFilesystemState struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize pulumi.IntPtrInput
	// Creation timestamp of the filesystem.
	CreatedAt pulumi.StringPtrInput
	// Description of the filesystem. Provide this property when you create a resource.
	Description pulumi.StringPtrInput
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapInput
	// Name of the filesystem. Provide this property when you create a resource.
	Name pulumi.StringPtrInput
	// Size of the filesystem, specified in GB.
	Size pulumi.IntPtrInput
	// The status of the filesystem.
	Status pulumi.StringPtrInput
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type pulumi.StringPtrInput
	// Availability zone where the filesystem will reside.
	Zone pulumi.StringPtrInput
}

func (YandexComputeFilesystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*yandexComputeFilesystemState)(nil)).Elem()
}

type yandexComputeFilesystemArgs struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize *int `pulumi:"blockSize"`
	// Description of the filesystem. Provide this property when you create a resource.
	Description *string `pulumi:"description"`
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels map[string]string `pulumi:"labels"`
	// Name of the filesystem. Provide this property when you create a resource.
	Name *string `pulumi:"name"`
	// Size of the filesystem, specified in GB.
	Size *int `pulumi:"size"`
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type *string `pulumi:"type"`
	// Availability zone where the filesystem will reside.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a YandexComputeFilesystem resource.
type YandexComputeFilesystemArgs struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize pulumi.IntPtrInput
	// Description of the filesystem. Provide this property when you create a resource.
	Description pulumi.StringPtrInput
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapInput
	// Name of the filesystem. Provide this property when you create a resource.
	Name pulumi.StringPtrInput
	// Size of the filesystem, specified in GB.
	Size pulumi.IntPtrInput
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type pulumi.StringPtrInput
	// Availability zone where the filesystem will reside.
	Zone pulumi.StringPtrInput
}

func (YandexComputeFilesystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*yandexComputeFilesystemArgs)(nil)).Elem()
}

type YandexComputeFilesystemInput interface {
	pulumi.Input

	ToYandexComputeFilesystemOutput() YandexComputeFilesystemOutput
	ToYandexComputeFilesystemOutputWithContext(ctx context.Context) YandexComputeFilesystemOutput
}

func (*YandexComputeFilesystem) ElementType() reflect.Type {
	return reflect.TypeOf((**YandexComputeFilesystem)(nil)).Elem()
}

func (i *YandexComputeFilesystem) ToYandexComputeFilesystemOutput() YandexComputeFilesystemOutput {
	return i.ToYandexComputeFilesystemOutputWithContext(context.Background())
}

func (i *YandexComputeFilesystem) ToYandexComputeFilesystemOutputWithContext(ctx context.Context) YandexComputeFilesystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YandexComputeFilesystemOutput)
}

// YandexComputeFilesystemArrayInput is an input type that accepts YandexComputeFilesystemArray and YandexComputeFilesystemArrayOutput values.
// You can construct a concrete instance of `YandexComputeFilesystemArrayInput` via:
//
//	YandexComputeFilesystemArray{ YandexComputeFilesystemArgs{...} }
type YandexComputeFilesystemArrayInput interface {
	pulumi.Input

	ToYandexComputeFilesystemArrayOutput() YandexComputeFilesystemArrayOutput
	ToYandexComputeFilesystemArrayOutputWithContext(context.Context) YandexComputeFilesystemArrayOutput
}

type YandexComputeFilesystemArray []YandexComputeFilesystemInput

func (YandexComputeFilesystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*YandexComputeFilesystem)(nil)).Elem()
}

func (i YandexComputeFilesystemArray) ToYandexComputeFilesystemArrayOutput() YandexComputeFilesystemArrayOutput {
	return i.ToYandexComputeFilesystemArrayOutputWithContext(context.Background())
}

func (i YandexComputeFilesystemArray) ToYandexComputeFilesystemArrayOutputWithContext(ctx context.Context) YandexComputeFilesystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YandexComputeFilesystemArrayOutput)
}

// YandexComputeFilesystemMapInput is an input type that accepts YandexComputeFilesystemMap and YandexComputeFilesystemMapOutput values.
// You can construct a concrete instance of `YandexComputeFilesystemMapInput` via:
//
//	YandexComputeFilesystemMap{ "key": YandexComputeFilesystemArgs{...} }
type YandexComputeFilesystemMapInput interface {
	pulumi.Input

	ToYandexComputeFilesystemMapOutput() YandexComputeFilesystemMapOutput
	ToYandexComputeFilesystemMapOutputWithContext(context.Context) YandexComputeFilesystemMapOutput
}

type YandexComputeFilesystemMap map[string]YandexComputeFilesystemInput

func (YandexComputeFilesystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*YandexComputeFilesystem)(nil)).Elem()
}

func (i YandexComputeFilesystemMap) ToYandexComputeFilesystemMapOutput() YandexComputeFilesystemMapOutput {
	return i.ToYandexComputeFilesystemMapOutputWithContext(context.Background())
}

func (i YandexComputeFilesystemMap) ToYandexComputeFilesystemMapOutputWithContext(ctx context.Context) YandexComputeFilesystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(YandexComputeFilesystemMapOutput)
}

type YandexComputeFilesystemOutput struct{ *pulumi.OutputState }

func (YandexComputeFilesystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**YandexComputeFilesystem)(nil)).Elem()
}

func (o YandexComputeFilesystemOutput) ToYandexComputeFilesystemOutput() YandexComputeFilesystemOutput {
	return o
}

func (o YandexComputeFilesystemOutput) ToYandexComputeFilesystemOutputWithContext(ctx context.Context) YandexComputeFilesystemOutput {
	return o
}

// Block size of the filesystem, specified in bytes.
func (o YandexComputeFilesystemOutput) BlockSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.IntPtrOutput { return v.BlockSize }).(pulumi.IntPtrOutput)
}

// Creation timestamp of the filesystem.
func (o YandexComputeFilesystemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the filesystem. Provide this property when you create a resource.
func (o YandexComputeFilesystemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the folder that the filesystem belongs to. If it is not provided, the default
// provider folder is used.
func (o YandexComputeFilesystemOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
func (o YandexComputeFilesystemOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the filesystem. Provide this property when you create a resource.
func (o YandexComputeFilesystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Size of the filesystem, specified in GB.
func (o YandexComputeFilesystemOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.IntPtrOutput { return v.Size }).(pulumi.IntPtrOutput)
}

// The status of the filesystem.
func (o YandexComputeFilesystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Type of filesystem to create. Type `network-hdd` is set by default.
func (o YandexComputeFilesystemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Availability zone where the filesystem will reside.
func (o YandexComputeFilesystemOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *YandexComputeFilesystem) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type YandexComputeFilesystemArrayOutput struct{ *pulumi.OutputState }

func (YandexComputeFilesystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*YandexComputeFilesystem)(nil)).Elem()
}

func (o YandexComputeFilesystemArrayOutput) ToYandexComputeFilesystemArrayOutput() YandexComputeFilesystemArrayOutput {
	return o
}

func (o YandexComputeFilesystemArrayOutput) ToYandexComputeFilesystemArrayOutputWithContext(ctx context.Context) YandexComputeFilesystemArrayOutput {
	return o
}

func (o YandexComputeFilesystemArrayOutput) Index(i pulumi.IntInput) YandexComputeFilesystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *YandexComputeFilesystem {
		return vs[0].([]*YandexComputeFilesystem)[vs[1].(int)]
	}).(YandexComputeFilesystemOutput)
}

type YandexComputeFilesystemMapOutput struct{ *pulumi.OutputState }

func (YandexComputeFilesystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*YandexComputeFilesystem)(nil)).Elem()
}

func (o YandexComputeFilesystemMapOutput) ToYandexComputeFilesystemMapOutput() YandexComputeFilesystemMapOutput {
	return o
}

func (o YandexComputeFilesystemMapOutput) ToYandexComputeFilesystemMapOutputWithContext(ctx context.Context) YandexComputeFilesystemMapOutput {
	return o
}

func (o YandexComputeFilesystemMapOutput) MapIndex(k pulumi.StringInput) YandexComputeFilesystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *YandexComputeFilesystem {
		return vs[0].(map[string]*YandexComputeFilesystem)[vs[1].(string)]
	}).(YandexComputeFilesystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*YandexComputeFilesystemInput)(nil)).Elem(), &YandexComputeFilesystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*YandexComputeFilesystemArrayInput)(nil)).Elem(), YandexComputeFilesystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*YandexComputeFilesystemMapInput)(nil)).Elem(), YandexComputeFilesystemMap{})
	pulumi.RegisterOutputType(YandexComputeFilesystemOutput{})
	pulumi.RegisterOutputType(YandexComputeFilesystemArrayOutput{})
	pulumi.RegisterOutputType(YandexComputeFilesystemMapOutput{})
}
