// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ComputeDisk struct {
	pulumi.CustomResourceState

	AllowRecreate       pulumi.BoolPtrOutput                 `pulumi:"allowRecreate"`
	BlockSize           pulumi.IntPtrOutput                  `pulumi:"blockSize"`
	CreatedAt           pulumi.StringOutput                  `pulumi:"createdAt"`
	Description         pulumi.StringPtrOutput               `pulumi:"description"`
	DiskPlacementPolicy ComputeDiskDiskPlacementPolicyOutput `pulumi:"diskPlacementPolicy"`
	FolderId            pulumi.StringOutput                  `pulumi:"folderId"`
	ImageId             pulumi.StringPtrOutput               `pulumi:"imageId"`
	Labels              pulumi.StringMapOutput               `pulumi:"labels"`
	Name                pulumi.StringOutput                  `pulumi:"name"`
	ProductIds          pulumi.StringArrayOutput             `pulumi:"productIds"`
	Size                pulumi.IntPtrOutput                  `pulumi:"size"`
	SnapshotId          pulumi.StringPtrOutput               `pulumi:"snapshotId"`
	Status              pulumi.StringOutput                  `pulumi:"status"`
	Type                pulumi.StringPtrOutput               `pulumi:"type"`
	Zone                pulumi.StringOutput                  `pulumi:"zone"`
}

// NewComputeDisk registers a new resource with the given unique name, arguments, and options.
func NewComputeDisk(ctx *pulumi.Context,
	name string, args *ComputeDiskArgs, opts ...pulumi.ResourceOption) (*ComputeDisk, error) {
	if args == nil {
		args = &ComputeDiskArgs{}
	}

	var resource ComputeDisk
	err := ctx.RegisterResource("yandex:index/computeDisk:ComputeDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeDisk gets an existing ComputeDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeDiskState, opts ...pulumi.ResourceOption) (*ComputeDisk, error) {
	var resource ComputeDisk
	err := ctx.ReadResource("yandex:index/computeDisk:ComputeDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeDisk resources.
type computeDiskState struct {
	AllowRecreate       *bool                           `pulumi:"allowRecreate"`
	BlockSize           *int                            `pulumi:"blockSize"`
	CreatedAt           *string                         `pulumi:"createdAt"`
	Description         *string                         `pulumi:"description"`
	DiskPlacementPolicy *ComputeDiskDiskPlacementPolicy `pulumi:"diskPlacementPolicy"`
	FolderId            *string                         `pulumi:"folderId"`
	ImageId             *string                         `pulumi:"imageId"`
	Labels              map[string]string               `pulumi:"labels"`
	Name                *string                         `pulumi:"name"`
	ProductIds          []string                        `pulumi:"productIds"`
	Size                *int                            `pulumi:"size"`
	SnapshotId          *string                         `pulumi:"snapshotId"`
	Status              *string                         `pulumi:"status"`
	Type                *string                         `pulumi:"type"`
	Zone                *string                         `pulumi:"zone"`
}

type ComputeDiskState struct {
	AllowRecreate       pulumi.BoolPtrInput
	BlockSize           pulumi.IntPtrInput
	CreatedAt           pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	DiskPlacementPolicy ComputeDiskDiskPlacementPolicyPtrInput
	FolderId            pulumi.StringPtrInput
	ImageId             pulumi.StringPtrInput
	Labels              pulumi.StringMapInput
	Name                pulumi.StringPtrInput
	ProductIds          pulumi.StringArrayInput
	Size                pulumi.IntPtrInput
	SnapshotId          pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Zone                pulumi.StringPtrInput
}

func (ComputeDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskState)(nil)).Elem()
}

type computeDiskArgs struct {
	AllowRecreate       *bool                           `pulumi:"allowRecreate"`
	BlockSize           *int                            `pulumi:"blockSize"`
	Description         *string                         `pulumi:"description"`
	DiskPlacementPolicy *ComputeDiskDiskPlacementPolicy `pulumi:"diskPlacementPolicy"`
	FolderId            *string                         `pulumi:"folderId"`
	ImageId             *string                         `pulumi:"imageId"`
	Labels              map[string]string               `pulumi:"labels"`
	Name                *string                         `pulumi:"name"`
	Size                *int                            `pulumi:"size"`
	SnapshotId          *string                         `pulumi:"snapshotId"`
	Type                *string                         `pulumi:"type"`
	Zone                *string                         `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeDisk resource.
type ComputeDiskArgs struct {
	AllowRecreate       pulumi.BoolPtrInput
	BlockSize           pulumi.IntPtrInput
	Description         pulumi.StringPtrInput
	DiskPlacementPolicy ComputeDiskDiskPlacementPolicyPtrInput
	FolderId            pulumi.StringPtrInput
	ImageId             pulumi.StringPtrInput
	Labels              pulumi.StringMapInput
	Name                pulumi.StringPtrInput
	Size                pulumi.IntPtrInput
	SnapshotId          pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Zone                pulumi.StringPtrInput
}

func (ComputeDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskArgs)(nil)).Elem()
}

type ComputeDiskInput interface {
	pulumi.Input

	ToComputeDiskOutput() ComputeDiskOutput
	ToComputeDiskOutputWithContext(ctx context.Context) ComputeDiskOutput
}

func (*ComputeDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDisk)(nil)).Elem()
}

func (i *ComputeDisk) ToComputeDiskOutput() ComputeDiskOutput {
	return i.ToComputeDiskOutputWithContext(context.Background())
}

func (i *ComputeDisk) ToComputeDiskOutputWithContext(ctx context.Context) ComputeDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskOutput)
}

// ComputeDiskArrayInput is an input type that accepts ComputeDiskArray and ComputeDiskArrayOutput values.
// You can construct a concrete instance of `ComputeDiskArrayInput` via:
//
//	ComputeDiskArray{ ComputeDiskArgs{...} }
type ComputeDiskArrayInput interface {
	pulumi.Input

	ToComputeDiskArrayOutput() ComputeDiskArrayOutput
	ToComputeDiskArrayOutputWithContext(context.Context) ComputeDiskArrayOutput
}

type ComputeDiskArray []ComputeDiskInput

func (ComputeDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeDisk)(nil)).Elem()
}

func (i ComputeDiskArray) ToComputeDiskArrayOutput() ComputeDiskArrayOutput {
	return i.ToComputeDiskArrayOutputWithContext(context.Background())
}

func (i ComputeDiskArray) ToComputeDiskArrayOutputWithContext(ctx context.Context) ComputeDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskArrayOutput)
}

// ComputeDiskMapInput is an input type that accepts ComputeDiskMap and ComputeDiskMapOutput values.
// You can construct a concrete instance of `ComputeDiskMapInput` via:
//
//	ComputeDiskMap{ "key": ComputeDiskArgs{...} }
type ComputeDiskMapInput interface {
	pulumi.Input

	ToComputeDiskMapOutput() ComputeDiskMapOutput
	ToComputeDiskMapOutputWithContext(context.Context) ComputeDiskMapOutput
}

type ComputeDiskMap map[string]ComputeDiskInput

func (ComputeDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeDisk)(nil)).Elem()
}

func (i ComputeDiskMap) ToComputeDiskMapOutput() ComputeDiskMapOutput {
	return i.ToComputeDiskMapOutputWithContext(context.Background())
}

func (i ComputeDiskMap) ToComputeDiskMapOutputWithContext(ctx context.Context) ComputeDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskMapOutput)
}

type ComputeDiskOutput struct{ *pulumi.OutputState }

func (ComputeDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDisk)(nil)).Elem()
}

func (o ComputeDiskOutput) ToComputeDiskOutput() ComputeDiskOutput {
	return o
}

func (o ComputeDiskOutput) ToComputeDiskOutputWithContext(ctx context.Context) ComputeDiskOutput {
	return o
}

func (o ComputeDiskOutput) AllowRecreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.BoolPtrOutput { return v.AllowRecreate }).(pulumi.BoolPtrOutput)
}

func (o ComputeDiskOutput) BlockSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.IntPtrOutput { return v.BlockSize }).(pulumi.IntPtrOutput)
}

func (o ComputeDiskOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ComputeDiskOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ComputeDiskOutput) DiskPlacementPolicy() ComputeDiskDiskPlacementPolicyOutput {
	return o.ApplyT(func(v *ComputeDisk) ComputeDiskDiskPlacementPolicyOutput { return v.DiskPlacementPolicy }).(ComputeDiskDiskPlacementPolicyOutput)
}

func (o ComputeDiskOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

func (o ComputeDiskOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o ComputeDiskOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o ComputeDiskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ComputeDiskOutput) ProductIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringArrayOutput { return v.ProductIds }).(pulumi.StringArrayOutput)
}

func (o ComputeDiskOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.IntPtrOutput { return v.Size }).(pulumi.IntPtrOutput)
}

func (o ComputeDiskOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o ComputeDiskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ComputeDiskOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ComputeDiskOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeDisk) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ComputeDiskArrayOutput struct{ *pulumi.OutputState }

func (ComputeDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeDisk)(nil)).Elem()
}

func (o ComputeDiskArrayOutput) ToComputeDiskArrayOutput() ComputeDiskArrayOutput {
	return o
}

func (o ComputeDiskArrayOutput) ToComputeDiskArrayOutputWithContext(ctx context.Context) ComputeDiskArrayOutput {
	return o
}

func (o ComputeDiskArrayOutput) Index(i pulumi.IntInput) ComputeDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeDisk {
		return vs[0].([]*ComputeDisk)[vs[1].(int)]
	}).(ComputeDiskOutput)
}

type ComputeDiskMapOutput struct{ *pulumi.OutputState }

func (ComputeDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeDisk)(nil)).Elem()
}

func (o ComputeDiskMapOutput) ToComputeDiskMapOutput() ComputeDiskMapOutput {
	return o
}

func (o ComputeDiskMapOutput) ToComputeDiskMapOutputWithContext(ctx context.Context) ComputeDiskMapOutput {
	return o
}

func (o ComputeDiskMapOutput) MapIndex(k pulumi.StringInput) ComputeDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeDisk {
		return vs[0].(map[string]*ComputeDisk)[vs[1].(string)]
	}).(ComputeDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskInput)(nil)).Elem(), &ComputeDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskArrayInput)(nil)).Elem(), ComputeDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskMapInput)(nil)).Elem(), ComputeDiskMap{})
	pulumi.RegisterOutputType(ComputeDiskOutput{})
	pulumi.RegisterOutputType(ComputeDiskArrayOutput{})
	pulumi.RegisterOutputType(ComputeDiskMapOutput{})
}
