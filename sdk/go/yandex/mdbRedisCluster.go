// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MdbRedisCluster struct {
	pulumi.CustomResourceState

	Config             MdbRedisClusterConfigOutput            `pulumi:"config"`
	CreatedAt          pulumi.StringOutput                    `pulumi:"createdAt"`
	DeletionProtection pulumi.BoolOutput                      `pulumi:"deletionProtection"`
	Description        pulumi.StringPtrOutput                 `pulumi:"description"`
	Environment        pulumi.StringOutput                    `pulumi:"environment"`
	FolderId           pulumi.StringOutput                    `pulumi:"folderId"`
	Health             pulumi.StringOutput                    `pulumi:"health"`
	Hosts              MdbRedisClusterHostArrayOutput         `pulumi:"hosts"`
	Labels             pulumi.StringMapOutput                 `pulumi:"labels"`
	MaintenanceWindow  MdbRedisClusterMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	Name               pulumi.StringOutput                    `pulumi:"name"`
	NetworkId          pulumi.StringOutput                    `pulumi:"networkId"`
	PersistenceMode    pulumi.StringOutput                    `pulumi:"persistenceMode"`
	Resources          MdbRedisClusterResourcesOutput         `pulumi:"resources"`
	SecurityGroupIds   pulumi.StringArrayOutput               `pulumi:"securityGroupIds"`
	Sharded            pulumi.BoolPtrOutput                   `pulumi:"sharded"`
	Status             pulumi.StringOutput                    `pulumi:"status"`
	TlsEnabled         pulumi.BoolOutput                      `pulumi:"tlsEnabled"`
}

// NewMdbRedisCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbRedisCluster(ctx *pulumi.Context,
	name string, args *MdbRedisClusterArgs, opts ...pulumi.ResourceOption) (*MdbRedisCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MdbRedisCluster
	err := ctx.RegisterResource("yandex:index/mdbRedisCluster:MdbRedisCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbRedisCluster gets an existing MdbRedisCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbRedisCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbRedisClusterState, opts ...pulumi.ResourceOption) (*MdbRedisCluster, error) {
	var resource MdbRedisCluster
	err := ctx.ReadResource("yandex:index/mdbRedisCluster:MdbRedisCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbRedisCluster resources.
type mdbRedisClusterState struct {
	Config             *MdbRedisClusterConfig            `pulumi:"config"`
	CreatedAt          *string                           `pulumi:"createdAt"`
	DeletionProtection *bool                             `pulumi:"deletionProtection"`
	Description        *string                           `pulumi:"description"`
	Environment        *string                           `pulumi:"environment"`
	FolderId           *string                           `pulumi:"folderId"`
	Health             *string                           `pulumi:"health"`
	Hosts              []MdbRedisClusterHost             `pulumi:"hosts"`
	Labels             map[string]string                 `pulumi:"labels"`
	MaintenanceWindow  *MdbRedisClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	Name               *string                           `pulumi:"name"`
	NetworkId          *string                           `pulumi:"networkId"`
	PersistenceMode    *string                           `pulumi:"persistenceMode"`
	Resources          *MdbRedisClusterResources         `pulumi:"resources"`
	SecurityGroupIds   []string                          `pulumi:"securityGroupIds"`
	Sharded            *bool                             `pulumi:"sharded"`
	Status             *string                           `pulumi:"status"`
	TlsEnabled         *bool                             `pulumi:"tlsEnabled"`
}

type MdbRedisClusterState struct {
	Config             MdbRedisClusterConfigPtrInput
	CreatedAt          pulumi.StringPtrInput
	DeletionProtection pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	Environment        pulumi.StringPtrInput
	FolderId           pulumi.StringPtrInput
	Health             pulumi.StringPtrInput
	Hosts              MdbRedisClusterHostArrayInput
	Labels             pulumi.StringMapInput
	MaintenanceWindow  MdbRedisClusterMaintenanceWindowPtrInput
	Name               pulumi.StringPtrInput
	NetworkId          pulumi.StringPtrInput
	PersistenceMode    pulumi.StringPtrInput
	Resources          MdbRedisClusterResourcesPtrInput
	SecurityGroupIds   pulumi.StringArrayInput
	Sharded            pulumi.BoolPtrInput
	Status             pulumi.StringPtrInput
	TlsEnabled         pulumi.BoolPtrInput
}

func (MdbRedisClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbRedisClusterState)(nil)).Elem()
}

type mdbRedisClusterArgs struct {
	Config             MdbRedisClusterConfig             `pulumi:"config"`
	DeletionProtection *bool                             `pulumi:"deletionProtection"`
	Description        *string                           `pulumi:"description"`
	Environment        string                            `pulumi:"environment"`
	FolderId           *string                           `pulumi:"folderId"`
	Hosts              []MdbRedisClusterHost             `pulumi:"hosts"`
	Labels             map[string]string                 `pulumi:"labels"`
	MaintenanceWindow  *MdbRedisClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	Name               *string                           `pulumi:"name"`
	NetworkId          string                            `pulumi:"networkId"`
	PersistenceMode    *string                           `pulumi:"persistenceMode"`
	Resources          MdbRedisClusterResources          `pulumi:"resources"`
	SecurityGroupIds   []string                          `pulumi:"securityGroupIds"`
	Sharded            *bool                             `pulumi:"sharded"`
	TlsEnabled         *bool                             `pulumi:"tlsEnabled"`
}

// The set of arguments for constructing a MdbRedisCluster resource.
type MdbRedisClusterArgs struct {
	Config             MdbRedisClusterConfigInput
	DeletionProtection pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	Environment        pulumi.StringInput
	FolderId           pulumi.StringPtrInput
	Hosts              MdbRedisClusterHostArrayInput
	Labels             pulumi.StringMapInput
	MaintenanceWindow  MdbRedisClusterMaintenanceWindowPtrInput
	Name               pulumi.StringPtrInput
	NetworkId          pulumi.StringInput
	PersistenceMode    pulumi.StringPtrInput
	Resources          MdbRedisClusterResourcesInput
	SecurityGroupIds   pulumi.StringArrayInput
	Sharded            pulumi.BoolPtrInput
	TlsEnabled         pulumi.BoolPtrInput
}

func (MdbRedisClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbRedisClusterArgs)(nil)).Elem()
}

type MdbRedisClusterInput interface {
	pulumi.Input

	ToMdbRedisClusterOutput() MdbRedisClusterOutput
	ToMdbRedisClusterOutputWithContext(ctx context.Context) MdbRedisClusterOutput
}

func (*MdbRedisCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbRedisCluster)(nil)).Elem()
}

func (i *MdbRedisCluster) ToMdbRedisClusterOutput() MdbRedisClusterOutput {
	return i.ToMdbRedisClusterOutputWithContext(context.Background())
}

func (i *MdbRedisCluster) ToMdbRedisClusterOutputWithContext(ctx context.Context) MdbRedisClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbRedisClusterOutput)
}

// MdbRedisClusterArrayInput is an input type that accepts MdbRedisClusterArray and MdbRedisClusterArrayOutput values.
// You can construct a concrete instance of `MdbRedisClusterArrayInput` via:
//
//	MdbRedisClusterArray{ MdbRedisClusterArgs{...} }
type MdbRedisClusterArrayInput interface {
	pulumi.Input

	ToMdbRedisClusterArrayOutput() MdbRedisClusterArrayOutput
	ToMdbRedisClusterArrayOutputWithContext(context.Context) MdbRedisClusterArrayOutput
}

type MdbRedisClusterArray []MdbRedisClusterInput

func (MdbRedisClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbRedisCluster)(nil)).Elem()
}

func (i MdbRedisClusterArray) ToMdbRedisClusterArrayOutput() MdbRedisClusterArrayOutput {
	return i.ToMdbRedisClusterArrayOutputWithContext(context.Background())
}

func (i MdbRedisClusterArray) ToMdbRedisClusterArrayOutputWithContext(ctx context.Context) MdbRedisClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbRedisClusterArrayOutput)
}

// MdbRedisClusterMapInput is an input type that accepts MdbRedisClusterMap and MdbRedisClusterMapOutput values.
// You can construct a concrete instance of `MdbRedisClusterMapInput` via:
//
//	MdbRedisClusterMap{ "key": MdbRedisClusterArgs{...} }
type MdbRedisClusterMapInput interface {
	pulumi.Input

	ToMdbRedisClusterMapOutput() MdbRedisClusterMapOutput
	ToMdbRedisClusterMapOutputWithContext(context.Context) MdbRedisClusterMapOutput
}

type MdbRedisClusterMap map[string]MdbRedisClusterInput

func (MdbRedisClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbRedisCluster)(nil)).Elem()
}

func (i MdbRedisClusterMap) ToMdbRedisClusterMapOutput() MdbRedisClusterMapOutput {
	return i.ToMdbRedisClusterMapOutputWithContext(context.Background())
}

func (i MdbRedisClusterMap) ToMdbRedisClusterMapOutputWithContext(ctx context.Context) MdbRedisClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbRedisClusterMapOutput)
}

type MdbRedisClusterOutput struct{ *pulumi.OutputState }

func (MdbRedisClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbRedisCluster)(nil)).Elem()
}

func (o MdbRedisClusterOutput) ToMdbRedisClusterOutput() MdbRedisClusterOutput {
	return o
}

func (o MdbRedisClusterOutput) ToMdbRedisClusterOutputWithContext(ctx context.Context) MdbRedisClusterOutput {
	return o
}

func (o MdbRedisClusterOutput) Config() MdbRedisClusterConfigOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterConfigOutput { return v.Config }).(MdbRedisClusterConfigOutput)
}

func (o MdbRedisClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

func (o MdbRedisClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MdbRedisClusterOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) Hosts() MdbRedisClusterHostArrayOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterHostArrayOutput { return v.Hosts }).(MdbRedisClusterHostArrayOutput)
}

func (o MdbRedisClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o MdbRedisClusterOutput) MaintenanceWindow() MdbRedisClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterMaintenanceWindowOutput { return v.MaintenanceWindow }).(MdbRedisClusterMaintenanceWindowOutput)
}

func (o MdbRedisClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) PersistenceMode() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.PersistenceMode }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) Resources() MdbRedisClusterResourcesOutput {
	return o.ApplyT(func(v *MdbRedisCluster) MdbRedisClusterResourcesOutput { return v.Resources }).(MdbRedisClusterResourcesOutput)
}

func (o MdbRedisClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o MdbRedisClusterOutput) Sharded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolPtrOutput { return v.Sharded }).(pulumi.BoolPtrOutput)
}

func (o MdbRedisClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o MdbRedisClusterOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbRedisCluster) pulumi.BoolOutput { return v.TlsEnabled }).(pulumi.BoolOutput)
}

type MdbRedisClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbRedisClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbRedisCluster)(nil)).Elem()
}

func (o MdbRedisClusterArrayOutput) ToMdbRedisClusterArrayOutput() MdbRedisClusterArrayOutput {
	return o
}

func (o MdbRedisClusterArrayOutput) ToMdbRedisClusterArrayOutputWithContext(ctx context.Context) MdbRedisClusterArrayOutput {
	return o
}

func (o MdbRedisClusterArrayOutput) Index(i pulumi.IntInput) MdbRedisClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbRedisCluster {
		return vs[0].([]*MdbRedisCluster)[vs[1].(int)]
	}).(MdbRedisClusterOutput)
}

type MdbRedisClusterMapOutput struct{ *pulumi.OutputState }

func (MdbRedisClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbRedisCluster)(nil)).Elem()
}

func (o MdbRedisClusterMapOutput) ToMdbRedisClusterMapOutput() MdbRedisClusterMapOutput {
	return o
}

func (o MdbRedisClusterMapOutput) ToMdbRedisClusterMapOutputWithContext(ctx context.Context) MdbRedisClusterMapOutput {
	return o
}

func (o MdbRedisClusterMapOutput) MapIndex(k pulumi.StringInput) MdbRedisClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbRedisCluster {
		return vs[0].(map[string]*MdbRedisCluster)[vs[1].(string)]
	}).(MdbRedisClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbRedisClusterInput)(nil)).Elem(), &MdbRedisCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbRedisClusterArrayInput)(nil)).Elem(), MdbRedisClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbRedisClusterMapInput)(nil)).Elem(), MdbRedisClusterMap{})
	pulumi.RegisterOutputType(MdbRedisClusterOutput{})
	pulumi.RegisterOutputType(MdbRedisClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbRedisClusterMapOutput{})
}
