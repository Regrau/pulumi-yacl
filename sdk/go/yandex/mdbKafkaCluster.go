// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MdbKafkaCluster struct {
	pulumi.CustomResourceState

	Config             MdbKafkaClusterConfigOutput            `pulumi:"config"`
	CreatedAt          pulumi.StringOutput                    `pulumi:"createdAt"`
	DeletionProtection pulumi.BoolOutput                      `pulumi:"deletionProtection"`
	Description        pulumi.StringPtrOutput                 `pulumi:"description"`
	Environment        pulumi.StringPtrOutput                 `pulumi:"environment"`
	FolderId           pulumi.StringOutput                    `pulumi:"folderId"`
	Health             pulumi.StringOutput                    `pulumi:"health"`
	HostGroupIds       pulumi.StringArrayOutput               `pulumi:"hostGroupIds"`
	Hosts              MdbKafkaClusterHostArrayOutput         `pulumi:"hosts"`
	Labels             pulumi.StringMapOutput                 `pulumi:"labels"`
	MaintenanceWindow  MdbKafkaClusterMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	Name               pulumi.StringOutput                    `pulumi:"name"`
	NetworkId          pulumi.StringOutput                    `pulumi:"networkId"`
	SecurityGroupIds   pulumi.StringArrayOutput               `pulumi:"securityGroupIds"`
	Status             pulumi.StringOutput                    `pulumi:"status"`
	SubnetIds          pulumi.StringArrayOutput               `pulumi:"subnetIds"`
	// Deprecated: to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
	Topics MdbKafkaClusterTopicArrayOutput `pulumi:"topics"`
	Users  MdbKafkaClusterUserArrayOutput  `pulumi:"users"`
}

// NewMdbKafkaCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbKafkaCluster(ctx *pulumi.Context,
	name string, args *MdbKafkaClusterArgs, opts ...pulumi.ResourceOption) (*MdbKafkaCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	var resource MdbKafkaCluster
	err := ctx.RegisterResource("yandex:index/mdbKafkaCluster:MdbKafkaCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbKafkaCluster gets an existing MdbKafkaCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbKafkaCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbKafkaClusterState, opts ...pulumi.ResourceOption) (*MdbKafkaCluster, error) {
	var resource MdbKafkaCluster
	err := ctx.ReadResource("yandex:index/mdbKafkaCluster:MdbKafkaCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbKafkaCluster resources.
type mdbKafkaClusterState struct {
	Config             *MdbKafkaClusterConfig            `pulumi:"config"`
	CreatedAt          *string                           `pulumi:"createdAt"`
	DeletionProtection *bool                             `pulumi:"deletionProtection"`
	Description        *string                           `pulumi:"description"`
	Environment        *string                           `pulumi:"environment"`
	FolderId           *string                           `pulumi:"folderId"`
	Health             *string                           `pulumi:"health"`
	HostGroupIds       []string                          `pulumi:"hostGroupIds"`
	Hosts              []MdbKafkaClusterHost             `pulumi:"hosts"`
	Labels             map[string]string                 `pulumi:"labels"`
	MaintenanceWindow  *MdbKafkaClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	Name               *string                           `pulumi:"name"`
	NetworkId          *string                           `pulumi:"networkId"`
	SecurityGroupIds   []string                          `pulumi:"securityGroupIds"`
	Status             *string                           `pulumi:"status"`
	SubnetIds          []string                          `pulumi:"subnetIds"`
	// Deprecated: to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
	Topics []MdbKafkaClusterTopic `pulumi:"topics"`
	Users  []MdbKafkaClusterUser  `pulumi:"users"`
}

type MdbKafkaClusterState struct {
	Config             MdbKafkaClusterConfigPtrInput
	CreatedAt          pulumi.StringPtrInput
	DeletionProtection pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	Environment        pulumi.StringPtrInput
	FolderId           pulumi.StringPtrInput
	Health             pulumi.StringPtrInput
	HostGroupIds       pulumi.StringArrayInput
	Hosts              MdbKafkaClusterHostArrayInput
	Labels             pulumi.StringMapInput
	MaintenanceWindow  MdbKafkaClusterMaintenanceWindowPtrInput
	Name               pulumi.StringPtrInput
	NetworkId          pulumi.StringPtrInput
	SecurityGroupIds   pulumi.StringArrayInput
	Status             pulumi.StringPtrInput
	SubnetIds          pulumi.StringArrayInput
	// Deprecated: to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
	Topics MdbKafkaClusterTopicArrayInput
	Users  MdbKafkaClusterUserArrayInput
}

func (MdbKafkaClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaClusterState)(nil)).Elem()
}

type mdbKafkaClusterArgs struct {
	Config             MdbKafkaClusterConfig             `pulumi:"config"`
	DeletionProtection *bool                             `pulumi:"deletionProtection"`
	Description        *string                           `pulumi:"description"`
	Environment        *string                           `pulumi:"environment"`
	FolderId           *string                           `pulumi:"folderId"`
	HostGroupIds       []string                          `pulumi:"hostGroupIds"`
	Labels             map[string]string                 `pulumi:"labels"`
	MaintenanceWindow  *MdbKafkaClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	Name               *string                           `pulumi:"name"`
	NetworkId          string                            `pulumi:"networkId"`
	SecurityGroupIds   []string                          `pulumi:"securityGroupIds"`
	SubnetIds          []string                          `pulumi:"subnetIds"`
	// Deprecated: to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
	Topics []MdbKafkaClusterTopic `pulumi:"topics"`
	Users  []MdbKafkaClusterUser  `pulumi:"users"`
}

// The set of arguments for constructing a MdbKafkaCluster resource.
type MdbKafkaClusterArgs struct {
	Config             MdbKafkaClusterConfigInput
	DeletionProtection pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	Environment        pulumi.StringPtrInput
	FolderId           pulumi.StringPtrInput
	HostGroupIds       pulumi.StringArrayInput
	Labels             pulumi.StringMapInput
	MaintenanceWindow  MdbKafkaClusterMaintenanceWindowPtrInput
	Name               pulumi.StringPtrInput
	NetworkId          pulumi.StringInput
	SecurityGroupIds   pulumi.StringArrayInput
	SubnetIds          pulumi.StringArrayInput
	// Deprecated: to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
	Topics MdbKafkaClusterTopicArrayInput
	Users  MdbKafkaClusterUserArrayInput
}

func (MdbKafkaClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaClusterArgs)(nil)).Elem()
}

type MdbKafkaClusterInput interface {
	pulumi.Input

	ToMdbKafkaClusterOutput() MdbKafkaClusterOutput
	ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput
}

func (*MdbKafkaCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaCluster)(nil)).Elem()
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterOutput() MdbKafkaClusterOutput {
	return i.ToMdbKafkaClusterOutputWithContext(context.Background())
}

func (i *MdbKafkaCluster) ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterOutput)
}

// MdbKafkaClusterArrayInput is an input type that accepts MdbKafkaClusterArray and MdbKafkaClusterArrayOutput values.
// You can construct a concrete instance of `MdbKafkaClusterArrayInput` via:
//
//	MdbKafkaClusterArray{ MdbKafkaClusterArgs{...} }
type MdbKafkaClusterArrayInput interface {
	pulumi.Input

	ToMdbKafkaClusterArrayOutput() MdbKafkaClusterArrayOutput
	ToMdbKafkaClusterArrayOutputWithContext(context.Context) MdbKafkaClusterArrayOutput
}

type MdbKafkaClusterArray []MdbKafkaClusterInput

func (MdbKafkaClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbKafkaCluster)(nil)).Elem()
}

func (i MdbKafkaClusterArray) ToMdbKafkaClusterArrayOutput() MdbKafkaClusterArrayOutput {
	return i.ToMdbKafkaClusterArrayOutputWithContext(context.Background())
}

func (i MdbKafkaClusterArray) ToMdbKafkaClusterArrayOutputWithContext(ctx context.Context) MdbKafkaClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterArrayOutput)
}

// MdbKafkaClusterMapInput is an input type that accepts MdbKafkaClusterMap and MdbKafkaClusterMapOutput values.
// You can construct a concrete instance of `MdbKafkaClusterMapInput` via:
//
//	MdbKafkaClusterMap{ "key": MdbKafkaClusterArgs{...} }
type MdbKafkaClusterMapInput interface {
	pulumi.Input

	ToMdbKafkaClusterMapOutput() MdbKafkaClusterMapOutput
	ToMdbKafkaClusterMapOutputWithContext(context.Context) MdbKafkaClusterMapOutput
}

type MdbKafkaClusterMap map[string]MdbKafkaClusterInput

func (MdbKafkaClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbKafkaCluster)(nil)).Elem()
}

func (i MdbKafkaClusterMap) ToMdbKafkaClusterMapOutput() MdbKafkaClusterMapOutput {
	return i.ToMdbKafkaClusterMapOutputWithContext(context.Background())
}

func (i MdbKafkaClusterMap) ToMdbKafkaClusterMapOutputWithContext(ctx context.Context) MdbKafkaClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaClusterMapOutput)
}

type MdbKafkaClusterOutput struct{ *pulumi.OutputState }

func (MdbKafkaClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaCluster)(nil)).Elem()
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterOutput() MdbKafkaClusterOutput {
	return o
}

func (o MdbKafkaClusterOutput) ToMdbKafkaClusterOutputWithContext(ctx context.Context) MdbKafkaClusterOutput {
	return o
}

func (o MdbKafkaClusterOutput) Config() MdbKafkaClusterConfigOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) MdbKafkaClusterConfigOutput { return v.Config }).(MdbKafkaClusterConfigOutput)
}

func (o MdbKafkaClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o MdbKafkaClusterOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

func (o MdbKafkaClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MdbKafkaClusterOutput) Environment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringPtrOutput { return v.Environment }).(pulumi.StringPtrOutput)
}

func (o MdbKafkaClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

func (o MdbKafkaClusterOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

func (o MdbKafkaClusterOutput) HostGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringArrayOutput { return v.HostGroupIds }).(pulumi.StringArrayOutput)
}

func (o MdbKafkaClusterOutput) Hosts() MdbKafkaClusterHostArrayOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) MdbKafkaClusterHostArrayOutput { return v.Hosts }).(MdbKafkaClusterHostArrayOutput)
}

func (o MdbKafkaClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o MdbKafkaClusterOutput) MaintenanceWindow() MdbKafkaClusterMaintenanceWindowOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) MdbKafkaClusterMaintenanceWindowOutput { return v.MaintenanceWindow }).(MdbKafkaClusterMaintenanceWindowOutput)
}

func (o MdbKafkaClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MdbKafkaClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o MdbKafkaClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o MdbKafkaClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o MdbKafkaClusterOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Deprecated: to manage topics, please switch to using a separate resource type yandex_mdb_kafka_topic
func (o MdbKafkaClusterOutput) Topics() MdbKafkaClusterTopicArrayOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) MdbKafkaClusterTopicArrayOutput { return v.Topics }).(MdbKafkaClusterTopicArrayOutput)
}

func (o MdbKafkaClusterOutput) Users() MdbKafkaClusterUserArrayOutput {
	return o.ApplyT(func(v *MdbKafkaCluster) MdbKafkaClusterUserArrayOutput { return v.Users }).(MdbKafkaClusterUserArrayOutput)
}

type MdbKafkaClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbKafkaClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbKafkaCluster)(nil)).Elem()
}

func (o MdbKafkaClusterArrayOutput) ToMdbKafkaClusterArrayOutput() MdbKafkaClusterArrayOutput {
	return o
}

func (o MdbKafkaClusterArrayOutput) ToMdbKafkaClusterArrayOutputWithContext(ctx context.Context) MdbKafkaClusterArrayOutput {
	return o
}

func (o MdbKafkaClusterArrayOutput) Index(i pulumi.IntInput) MdbKafkaClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbKafkaCluster {
		return vs[0].([]*MdbKafkaCluster)[vs[1].(int)]
	}).(MdbKafkaClusterOutput)
}

type MdbKafkaClusterMapOutput struct{ *pulumi.OutputState }

func (MdbKafkaClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbKafkaCluster)(nil)).Elem()
}

func (o MdbKafkaClusterMapOutput) ToMdbKafkaClusterMapOutput() MdbKafkaClusterMapOutput {
	return o
}

func (o MdbKafkaClusterMapOutput) ToMdbKafkaClusterMapOutputWithContext(ctx context.Context) MdbKafkaClusterMapOutput {
	return o
}

func (o MdbKafkaClusterMapOutput) MapIndex(k pulumi.StringInput) MdbKafkaClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbKafkaCluster {
		return vs[0].(map[string]*MdbKafkaCluster)[vs[1].(string)]
	}).(MdbKafkaClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaClusterInput)(nil)).Elem(), &MdbKafkaCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaClusterArrayInput)(nil)).Elem(), MdbKafkaClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaClusterMapInput)(nil)).Elem(), MdbKafkaClusterMap{})
	pulumi.RegisterOutputType(MdbKafkaClusterOutput{})
	pulumi.RegisterOutputType(MdbKafkaClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbKafkaClusterMapOutput{})
}
