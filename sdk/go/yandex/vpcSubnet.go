// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VpcSubnet struct {
	pulumi.CustomResourceState

	CreatedAt    pulumi.StringOutput           `pulumi:"createdAt"`
	Description  pulumi.StringPtrOutput        `pulumi:"description"`
	DhcpOptions  VpcSubnetDhcpOptionsPtrOutput `pulumi:"dhcpOptions"`
	FolderId     pulumi.StringOutput           `pulumi:"folderId"`
	Labels       pulumi.StringMapOutput        `pulumi:"labels"`
	Name         pulumi.StringOutput           `pulumi:"name"`
	NetworkId    pulumi.StringOutput           `pulumi:"networkId"`
	RouteTableId pulumi.StringPtrOutput        `pulumi:"routeTableId"`
	V4CidrBlocks pulumi.StringArrayOutput      `pulumi:"v4CidrBlocks"`
	V6CidrBlocks pulumi.StringArrayOutput      `pulumi:"v6CidrBlocks"`
	Zone         pulumi.StringOutput           `pulumi:"zone"`
}

// NewVpcSubnet registers a new resource with the given unique name, arguments, and options.
func NewVpcSubnet(ctx *pulumi.Context,
	name string, args *VpcSubnetArgs, opts ...pulumi.ResourceOption) (*VpcSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.V4CidrBlocks == nil {
		return nil, errors.New("invalid value for required argument 'V4CidrBlocks'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpcSubnet
	err := ctx.RegisterResource("yandex:index/vpcSubnet:VpcSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcSubnet gets an existing VpcSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcSubnetState, opts ...pulumi.ResourceOption) (*VpcSubnet, error) {
	var resource VpcSubnet
	err := ctx.ReadResource("yandex:index/vpcSubnet:VpcSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcSubnet resources.
type vpcSubnetState struct {
	CreatedAt    *string               `pulumi:"createdAt"`
	Description  *string               `pulumi:"description"`
	DhcpOptions  *VpcSubnetDhcpOptions `pulumi:"dhcpOptions"`
	FolderId     *string               `pulumi:"folderId"`
	Labels       map[string]string     `pulumi:"labels"`
	Name         *string               `pulumi:"name"`
	NetworkId    *string               `pulumi:"networkId"`
	RouteTableId *string               `pulumi:"routeTableId"`
	V4CidrBlocks []string              `pulumi:"v4CidrBlocks"`
	V6CidrBlocks []string              `pulumi:"v6CidrBlocks"`
	Zone         *string               `pulumi:"zone"`
}

type VpcSubnetState struct {
	CreatedAt    pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	DhcpOptions  VpcSubnetDhcpOptionsPtrInput
	FolderId     pulumi.StringPtrInput
	Labels       pulumi.StringMapInput
	Name         pulumi.StringPtrInput
	NetworkId    pulumi.StringPtrInput
	RouteTableId pulumi.StringPtrInput
	V4CidrBlocks pulumi.StringArrayInput
	V6CidrBlocks pulumi.StringArrayInput
	Zone         pulumi.StringPtrInput
}

func (VpcSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcSubnetState)(nil)).Elem()
}

type vpcSubnetArgs struct {
	Description  *string               `pulumi:"description"`
	DhcpOptions  *VpcSubnetDhcpOptions `pulumi:"dhcpOptions"`
	FolderId     *string               `pulumi:"folderId"`
	Labels       map[string]string     `pulumi:"labels"`
	Name         *string               `pulumi:"name"`
	NetworkId    string                `pulumi:"networkId"`
	RouteTableId *string               `pulumi:"routeTableId"`
	V4CidrBlocks []string              `pulumi:"v4CidrBlocks"`
	Zone         *string               `pulumi:"zone"`
}

// The set of arguments for constructing a VpcSubnet resource.
type VpcSubnetArgs struct {
	Description  pulumi.StringPtrInput
	DhcpOptions  VpcSubnetDhcpOptionsPtrInput
	FolderId     pulumi.StringPtrInput
	Labels       pulumi.StringMapInput
	Name         pulumi.StringPtrInput
	NetworkId    pulumi.StringInput
	RouteTableId pulumi.StringPtrInput
	V4CidrBlocks pulumi.StringArrayInput
	Zone         pulumi.StringPtrInput
}

func (VpcSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcSubnetArgs)(nil)).Elem()
}

type VpcSubnetInput interface {
	pulumi.Input

	ToVpcSubnetOutput() VpcSubnetOutput
	ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput
}

func (*VpcSubnet) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcSubnet)(nil)).Elem()
}

func (i *VpcSubnet) ToVpcSubnetOutput() VpcSubnetOutput {
	return i.ToVpcSubnetOutputWithContext(context.Background())
}

func (i *VpcSubnet) ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetOutput)
}

// VpcSubnetArrayInput is an input type that accepts VpcSubnetArray and VpcSubnetArrayOutput values.
// You can construct a concrete instance of `VpcSubnetArrayInput` via:
//
//	VpcSubnetArray{ VpcSubnetArgs{...} }
type VpcSubnetArrayInput interface {
	pulumi.Input

	ToVpcSubnetArrayOutput() VpcSubnetArrayOutput
	ToVpcSubnetArrayOutputWithContext(context.Context) VpcSubnetArrayOutput
}

type VpcSubnetArray []VpcSubnetInput

func (VpcSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcSubnet)(nil)).Elem()
}

func (i VpcSubnetArray) ToVpcSubnetArrayOutput() VpcSubnetArrayOutput {
	return i.ToVpcSubnetArrayOutputWithContext(context.Background())
}

func (i VpcSubnetArray) ToVpcSubnetArrayOutputWithContext(ctx context.Context) VpcSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetArrayOutput)
}

// VpcSubnetMapInput is an input type that accepts VpcSubnetMap and VpcSubnetMapOutput values.
// You can construct a concrete instance of `VpcSubnetMapInput` via:
//
//	VpcSubnetMap{ "key": VpcSubnetArgs{...} }
type VpcSubnetMapInput interface {
	pulumi.Input

	ToVpcSubnetMapOutput() VpcSubnetMapOutput
	ToVpcSubnetMapOutputWithContext(context.Context) VpcSubnetMapOutput
}

type VpcSubnetMap map[string]VpcSubnetInput

func (VpcSubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcSubnet)(nil)).Elem()
}

func (i VpcSubnetMap) ToVpcSubnetMapOutput() VpcSubnetMapOutput {
	return i.ToVpcSubnetMapOutputWithContext(context.Background())
}

func (i VpcSubnetMap) ToVpcSubnetMapOutputWithContext(ctx context.Context) VpcSubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcSubnetMapOutput)
}

type VpcSubnetOutput struct{ *pulumi.OutputState }

func (VpcSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetOutput) ToVpcSubnetOutput() VpcSubnetOutput {
	return o
}

func (o VpcSubnetOutput) ToVpcSubnetOutputWithContext(ctx context.Context) VpcSubnetOutput {
	return o
}

func (o VpcSubnetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o VpcSubnetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VpcSubnetOutput) DhcpOptions() VpcSubnetDhcpOptionsPtrOutput {
	return o.ApplyT(func(v *VpcSubnet) VpcSubnetDhcpOptionsPtrOutput { return v.DhcpOptions }).(VpcSubnetDhcpOptionsPtrOutput)
}

func (o VpcSubnetOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

func (o VpcSubnetOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o VpcSubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcSubnetOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o VpcSubnetOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringPtrOutput { return v.RouteTableId }).(pulumi.StringPtrOutput)
}

func (o VpcSubnetOutput) V4CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringArrayOutput { return v.V4CidrBlocks }).(pulumi.StringArrayOutput)
}

func (o VpcSubnetOutput) V6CidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringArrayOutput { return v.V6CidrBlocks }).(pulumi.StringArrayOutput)
}

func (o VpcSubnetOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcSubnet) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type VpcSubnetArrayOutput struct{ *pulumi.OutputState }

func (VpcSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetArrayOutput) ToVpcSubnetArrayOutput() VpcSubnetArrayOutput {
	return o
}

func (o VpcSubnetArrayOutput) ToVpcSubnetArrayOutputWithContext(ctx context.Context) VpcSubnetArrayOutput {
	return o
}

func (o VpcSubnetArrayOutput) Index(i pulumi.IntInput) VpcSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcSubnet {
		return vs[0].([]*VpcSubnet)[vs[1].(int)]
	}).(VpcSubnetOutput)
}

type VpcSubnetMapOutput struct{ *pulumi.OutputState }

func (VpcSubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcSubnet)(nil)).Elem()
}

func (o VpcSubnetMapOutput) ToVpcSubnetMapOutput() VpcSubnetMapOutput {
	return o
}

func (o VpcSubnetMapOutput) ToVpcSubnetMapOutputWithContext(ctx context.Context) VpcSubnetMapOutput {
	return o
}

func (o VpcSubnetMapOutput) MapIndex(k pulumi.StringInput) VpcSubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcSubnet {
		return vs[0].(map[string]*VpcSubnet)[vs[1].(string)]
	}).(VpcSubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetInput)(nil)).Elem(), &VpcSubnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetArrayInput)(nil)).Elem(), VpcSubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcSubnetMapInput)(nil)).Elem(), VpcSubnetMap{})
	pulumi.RegisterOutputType(VpcSubnetOutput{})
	pulumi.RegisterOutputType(VpcSubnetArrayOutput{})
	pulumi.RegisterOutputType(VpcSubnetMapOutput{})
}
