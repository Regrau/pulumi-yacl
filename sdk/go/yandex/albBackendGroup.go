// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AlbBackendGroup struct {
	pulumi.CustomResourceState

	CreatedAt       pulumi.StringOutput                     `pulumi:"createdAt"`
	Description     pulumi.StringPtrOutput                  `pulumi:"description"`
	FolderId        pulumi.StringOutput                     `pulumi:"folderId"`
	GrpcBackends    AlbBackendGroupGrpcBackendArrayOutput   `pulumi:"grpcBackends"`
	HttpBackends    AlbBackendGroupHttpBackendArrayOutput   `pulumi:"httpBackends"`
	Labels          pulumi.StringMapOutput                  `pulumi:"labels"`
	Name            pulumi.StringOutput                     `pulumi:"name"`
	SessionAffinity AlbBackendGroupSessionAffinityPtrOutput `pulumi:"sessionAffinity"`
	StreamBackends  AlbBackendGroupStreamBackendArrayOutput `pulumi:"streamBackends"`
}

// NewAlbBackendGroup registers a new resource with the given unique name, arguments, and options.
func NewAlbBackendGroup(ctx *pulumi.Context,
	name string, args *AlbBackendGroupArgs, opts ...pulumi.ResourceOption) (*AlbBackendGroup, error) {
	if args == nil {
		args = &AlbBackendGroupArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource AlbBackendGroup
	err := ctx.RegisterResource("yandex:index/albBackendGroup:AlbBackendGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlbBackendGroup gets an existing AlbBackendGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlbBackendGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlbBackendGroupState, opts ...pulumi.ResourceOption) (*AlbBackendGroup, error) {
	var resource AlbBackendGroup
	err := ctx.ReadResource("yandex:index/albBackendGroup:AlbBackendGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlbBackendGroup resources.
type albBackendGroupState struct {
	CreatedAt       *string                         `pulumi:"createdAt"`
	Description     *string                         `pulumi:"description"`
	FolderId        *string                         `pulumi:"folderId"`
	GrpcBackends    []AlbBackendGroupGrpcBackend    `pulumi:"grpcBackends"`
	HttpBackends    []AlbBackendGroupHttpBackend    `pulumi:"httpBackends"`
	Labels          map[string]string               `pulumi:"labels"`
	Name            *string                         `pulumi:"name"`
	SessionAffinity *AlbBackendGroupSessionAffinity `pulumi:"sessionAffinity"`
	StreamBackends  []AlbBackendGroupStreamBackend  `pulumi:"streamBackends"`
}

type AlbBackendGroupState struct {
	CreatedAt       pulumi.StringPtrInput
	Description     pulumi.StringPtrInput
	FolderId        pulumi.StringPtrInput
	GrpcBackends    AlbBackendGroupGrpcBackendArrayInput
	HttpBackends    AlbBackendGroupHttpBackendArrayInput
	Labels          pulumi.StringMapInput
	Name            pulumi.StringPtrInput
	SessionAffinity AlbBackendGroupSessionAffinityPtrInput
	StreamBackends  AlbBackendGroupStreamBackendArrayInput
}

func (AlbBackendGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*albBackendGroupState)(nil)).Elem()
}

type albBackendGroupArgs struct {
	Description     *string                         `pulumi:"description"`
	FolderId        *string                         `pulumi:"folderId"`
	GrpcBackends    []AlbBackendGroupGrpcBackend    `pulumi:"grpcBackends"`
	HttpBackends    []AlbBackendGroupHttpBackend    `pulumi:"httpBackends"`
	Labels          map[string]string               `pulumi:"labels"`
	Name            *string                         `pulumi:"name"`
	SessionAffinity *AlbBackendGroupSessionAffinity `pulumi:"sessionAffinity"`
	StreamBackends  []AlbBackendGroupStreamBackend  `pulumi:"streamBackends"`
}

// The set of arguments for constructing a AlbBackendGroup resource.
type AlbBackendGroupArgs struct {
	Description     pulumi.StringPtrInput
	FolderId        pulumi.StringPtrInput
	GrpcBackends    AlbBackendGroupGrpcBackendArrayInput
	HttpBackends    AlbBackendGroupHttpBackendArrayInput
	Labels          pulumi.StringMapInput
	Name            pulumi.StringPtrInput
	SessionAffinity AlbBackendGroupSessionAffinityPtrInput
	StreamBackends  AlbBackendGroupStreamBackendArrayInput
}

func (AlbBackendGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*albBackendGroupArgs)(nil)).Elem()
}

type AlbBackendGroupInput interface {
	pulumi.Input

	ToAlbBackendGroupOutput() AlbBackendGroupOutput
	ToAlbBackendGroupOutputWithContext(ctx context.Context) AlbBackendGroupOutput
}

func (*AlbBackendGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbBackendGroup)(nil)).Elem()
}

func (i *AlbBackendGroup) ToAlbBackendGroupOutput() AlbBackendGroupOutput {
	return i.ToAlbBackendGroupOutputWithContext(context.Background())
}

func (i *AlbBackendGroup) ToAlbBackendGroupOutputWithContext(ctx context.Context) AlbBackendGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbBackendGroupOutput)
}

// AlbBackendGroupArrayInput is an input type that accepts AlbBackendGroupArray and AlbBackendGroupArrayOutput values.
// You can construct a concrete instance of `AlbBackendGroupArrayInput` via:
//
//	AlbBackendGroupArray{ AlbBackendGroupArgs{...} }
type AlbBackendGroupArrayInput interface {
	pulumi.Input

	ToAlbBackendGroupArrayOutput() AlbBackendGroupArrayOutput
	ToAlbBackendGroupArrayOutputWithContext(context.Context) AlbBackendGroupArrayOutput
}

type AlbBackendGroupArray []AlbBackendGroupInput

func (AlbBackendGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbBackendGroup)(nil)).Elem()
}

func (i AlbBackendGroupArray) ToAlbBackendGroupArrayOutput() AlbBackendGroupArrayOutput {
	return i.ToAlbBackendGroupArrayOutputWithContext(context.Background())
}

func (i AlbBackendGroupArray) ToAlbBackendGroupArrayOutputWithContext(ctx context.Context) AlbBackendGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbBackendGroupArrayOutput)
}

// AlbBackendGroupMapInput is an input type that accepts AlbBackendGroupMap and AlbBackendGroupMapOutput values.
// You can construct a concrete instance of `AlbBackendGroupMapInput` via:
//
//	AlbBackendGroupMap{ "key": AlbBackendGroupArgs{...} }
type AlbBackendGroupMapInput interface {
	pulumi.Input

	ToAlbBackendGroupMapOutput() AlbBackendGroupMapOutput
	ToAlbBackendGroupMapOutputWithContext(context.Context) AlbBackendGroupMapOutput
}

type AlbBackendGroupMap map[string]AlbBackendGroupInput

func (AlbBackendGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbBackendGroup)(nil)).Elem()
}

func (i AlbBackendGroupMap) ToAlbBackendGroupMapOutput() AlbBackendGroupMapOutput {
	return i.ToAlbBackendGroupMapOutputWithContext(context.Background())
}

func (i AlbBackendGroupMap) ToAlbBackendGroupMapOutputWithContext(ctx context.Context) AlbBackendGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbBackendGroupMapOutput)
}

type AlbBackendGroupOutput struct{ *pulumi.OutputState }

func (AlbBackendGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbBackendGroup)(nil)).Elem()
}

func (o AlbBackendGroupOutput) ToAlbBackendGroupOutput() AlbBackendGroupOutput {
	return o
}

func (o AlbBackendGroupOutput) ToAlbBackendGroupOutputWithContext(ctx context.Context) AlbBackendGroupOutput {
	return o
}

func (o AlbBackendGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o AlbBackendGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AlbBackendGroupOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

func (o AlbBackendGroupOutput) GrpcBackends() AlbBackendGroupGrpcBackendArrayOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupGrpcBackendArrayOutput { return v.GrpcBackends }).(AlbBackendGroupGrpcBackendArrayOutput)
}

func (o AlbBackendGroupOutput) HttpBackends() AlbBackendGroupHttpBackendArrayOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupHttpBackendArrayOutput { return v.HttpBackends }).(AlbBackendGroupHttpBackendArrayOutput)
}

func (o AlbBackendGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o AlbBackendGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbBackendGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AlbBackendGroupOutput) SessionAffinity() AlbBackendGroupSessionAffinityPtrOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupSessionAffinityPtrOutput { return v.SessionAffinity }).(AlbBackendGroupSessionAffinityPtrOutput)
}

func (o AlbBackendGroupOutput) StreamBackends() AlbBackendGroupStreamBackendArrayOutput {
	return o.ApplyT(func(v *AlbBackendGroup) AlbBackendGroupStreamBackendArrayOutput { return v.StreamBackends }).(AlbBackendGroupStreamBackendArrayOutput)
}

type AlbBackendGroupArrayOutput struct{ *pulumi.OutputState }

func (AlbBackendGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbBackendGroup)(nil)).Elem()
}

func (o AlbBackendGroupArrayOutput) ToAlbBackendGroupArrayOutput() AlbBackendGroupArrayOutput {
	return o
}

func (o AlbBackendGroupArrayOutput) ToAlbBackendGroupArrayOutputWithContext(ctx context.Context) AlbBackendGroupArrayOutput {
	return o
}

func (o AlbBackendGroupArrayOutput) Index(i pulumi.IntInput) AlbBackendGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlbBackendGroup {
		return vs[0].([]*AlbBackendGroup)[vs[1].(int)]
	}).(AlbBackendGroupOutput)
}

type AlbBackendGroupMapOutput struct{ *pulumi.OutputState }

func (AlbBackendGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbBackendGroup)(nil)).Elem()
}

func (o AlbBackendGroupMapOutput) ToAlbBackendGroupMapOutput() AlbBackendGroupMapOutput {
	return o
}

func (o AlbBackendGroupMapOutput) ToAlbBackendGroupMapOutputWithContext(ctx context.Context) AlbBackendGroupMapOutput {
	return o
}

func (o AlbBackendGroupMapOutput) MapIndex(k pulumi.StringInput) AlbBackendGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlbBackendGroup {
		return vs[0].(map[string]*AlbBackendGroup)[vs[1].(string)]
	}).(AlbBackendGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlbBackendGroupInput)(nil)).Elem(), &AlbBackendGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbBackendGroupArrayInput)(nil)).Elem(), AlbBackendGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbBackendGroupMapInput)(nil)).Elem(), AlbBackendGroupMap{})
	pulumi.RegisterOutputType(AlbBackendGroupOutput{})
	pulumi.RegisterOutputType(AlbBackendGroupArrayOutput{})
	pulumi.RegisterOutputType(AlbBackendGroupMapOutput{})
}
