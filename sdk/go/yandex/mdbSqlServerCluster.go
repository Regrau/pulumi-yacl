// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MdbSqlServerCluster struct {
	pulumi.CustomResourceState

	BackupWindowStart  MdbSqlServerClusterBackupWindowStartOutput `pulumi:"backupWindowStart"`
	CreatedAt          pulumi.StringOutput                        `pulumi:"createdAt"`
	Databases          MdbSqlServerClusterDatabaseArrayOutput     `pulumi:"databases"`
	DeletionProtection pulumi.BoolOutput                          `pulumi:"deletionProtection"`
	Description        pulumi.StringPtrOutput                     `pulumi:"description"`
	Environment        pulumi.StringOutput                        `pulumi:"environment"`
	FolderId           pulumi.StringOutput                        `pulumi:"folderId"`
	Health             pulumi.StringOutput                        `pulumi:"health"`
	HostGroupIds       pulumi.StringArrayOutput                   `pulumi:"hostGroupIds"`
	Hosts              MdbSqlServerClusterHostArrayOutput         `pulumi:"hosts"`
	Labels             pulumi.StringMapOutput                     `pulumi:"labels"`
	Name               pulumi.StringOutput                        `pulumi:"name"`
	NetworkId          pulumi.StringOutput                        `pulumi:"networkId"`
	Resources          MdbSqlServerClusterResourcesOutput         `pulumi:"resources"`
	SecurityGroupIds   pulumi.StringArrayOutput                   `pulumi:"securityGroupIds"`
	Sqlcollation       pulumi.StringOutput                        `pulumi:"sqlcollation"`
	SqlserverConfig    pulumi.StringMapOutput                     `pulumi:"sqlserverConfig"`
	Status             pulumi.StringOutput                        `pulumi:"status"`
	Users              MdbSqlServerClusterUserArrayOutput         `pulumi:"users"`
	Version            pulumi.StringOutput                        `pulumi:"version"`
}

// NewMdbSqlServerCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbSqlServerCluster(ctx *pulumi.Context,
	name string, args *MdbSqlServerClusterArgs, opts ...pulumi.ResourceOption) (*MdbSqlServerCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Databases == nil {
		return nil, errors.New("invalid value for required argument 'Databases'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource MdbSqlServerCluster
	err := ctx.RegisterResource("yandex:index/mdbSqlServerCluster:MdbSqlServerCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbSqlServerCluster gets an existing MdbSqlServerCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbSqlServerCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbSqlServerClusterState, opts ...pulumi.ResourceOption) (*MdbSqlServerCluster, error) {
	var resource MdbSqlServerCluster
	err := ctx.ReadResource("yandex:index/mdbSqlServerCluster:MdbSqlServerCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbSqlServerCluster resources.
type mdbSqlServerClusterState struct {
	BackupWindowStart  *MdbSqlServerClusterBackupWindowStart `pulumi:"backupWindowStart"`
	CreatedAt          *string                               `pulumi:"createdAt"`
	Databases          []MdbSqlServerClusterDatabase         `pulumi:"databases"`
	DeletionProtection *bool                                 `pulumi:"deletionProtection"`
	Description        *string                               `pulumi:"description"`
	Environment        *string                               `pulumi:"environment"`
	FolderId           *string                               `pulumi:"folderId"`
	Health             *string                               `pulumi:"health"`
	HostGroupIds       []string                              `pulumi:"hostGroupIds"`
	Hosts              []MdbSqlServerClusterHost             `pulumi:"hosts"`
	Labels             map[string]string                     `pulumi:"labels"`
	Name               *string                               `pulumi:"name"`
	NetworkId          *string                               `pulumi:"networkId"`
	Resources          *MdbSqlServerClusterResources         `pulumi:"resources"`
	SecurityGroupIds   []string                              `pulumi:"securityGroupIds"`
	Sqlcollation       *string                               `pulumi:"sqlcollation"`
	SqlserverConfig    map[string]string                     `pulumi:"sqlserverConfig"`
	Status             *string                               `pulumi:"status"`
	Users              []MdbSqlServerClusterUser             `pulumi:"users"`
	Version            *string                               `pulumi:"version"`
}

type MdbSqlServerClusterState struct {
	BackupWindowStart  MdbSqlServerClusterBackupWindowStartPtrInput
	CreatedAt          pulumi.StringPtrInput
	Databases          MdbSqlServerClusterDatabaseArrayInput
	DeletionProtection pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	Environment        pulumi.StringPtrInput
	FolderId           pulumi.StringPtrInput
	Health             pulumi.StringPtrInput
	HostGroupIds       pulumi.StringArrayInput
	Hosts              MdbSqlServerClusterHostArrayInput
	Labels             pulumi.StringMapInput
	Name               pulumi.StringPtrInput
	NetworkId          pulumi.StringPtrInput
	Resources          MdbSqlServerClusterResourcesPtrInput
	SecurityGroupIds   pulumi.StringArrayInput
	Sqlcollation       pulumi.StringPtrInput
	SqlserverConfig    pulumi.StringMapInput
	Status             pulumi.StringPtrInput
	Users              MdbSqlServerClusterUserArrayInput
	Version            pulumi.StringPtrInput
}

func (MdbSqlServerClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbSqlServerClusterState)(nil)).Elem()
}

type mdbSqlServerClusterArgs struct {
	BackupWindowStart  *MdbSqlServerClusterBackupWindowStart `pulumi:"backupWindowStart"`
	Databases          []MdbSqlServerClusterDatabase         `pulumi:"databases"`
	DeletionProtection *bool                                 `pulumi:"deletionProtection"`
	Description        *string                               `pulumi:"description"`
	Environment        string                                `pulumi:"environment"`
	FolderId           *string                               `pulumi:"folderId"`
	HostGroupIds       []string                              `pulumi:"hostGroupIds"`
	Hosts              []MdbSqlServerClusterHost             `pulumi:"hosts"`
	Labels             map[string]string                     `pulumi:"labels"`
	Name               *string                               `pulumi:"name"`
	NetworkId          string                                `pulumi:"networkId"`
	Resources          MdbSqlServerClusterResources          `pulumi:"resources"`
	SecurityGroupIds   []string                              `pulumi:"securityGroupIds"`
	Sqlcollation       *string                               `pulumi:"sqlcollation"`
	SqlserverConfig    map[string]string                     `pulumi:"sqlserverConfig"`
	Users              []MdbSqlServerClusterUser             `pulumi:"users"`
	Version            string                                `pulumi:"version"`
}

// The set of arguments for constructing a MdbSqlServerCluster resource.
type MdbSqlServerClusterArgs struct {
	BackupWindowStart  MdbSqlServerClusterBackupWindowStartPtrInput
	Databases          MdbSqlServerClusterDatabaseArrayInput
	DeletionProtection pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	Environment        pulumi.StringInput
	FolderId           pulumi.StringPtrInput
	HostGroupIds       pulumi.StringArrayInput
	Hosts              MdbSqlServerClusterHostArrayInput
	Labels             pulumi.StringMapInput
	Name               pulumi.StringPtrInput
	NetworkId          pulumi.StringInput
	Resources          MdbSqlServerClusterResourcesInput
	SecurityGroupIds   pulumi.StringArrayInput
	Sqlcollation       pulumi.StringPtrInput
	SqlserverConfig    pulumi.StringMapInput
	Users              MdbSqlServerClusterUserArrayInput
	Version            pulumi.StringInput
}

func (MdbSqlServerClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbSqlServerClusterArgs)(nil)).Elem()
}

type MdbSqlServerClusterInput interface {
	pulumi.Input

	ToMdbSqlServerClusterOutput() MdbSqlServerClusterOutput
	ToMdbSqlServerClusterOutputWithContext(ctx context.Context) MdbSqlServerClusterOutput
}

func (*MdbSqlServerCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbSqlServerCluster)(nil)).Elem()
}

func (i *MdbSqlServerCluster) ToMdbSqlServerClusterOutput() MdbSqlServerClusterOutput {
	return i.ToMdbSqlServerClusterOutputWithContext(context.Background())
}

func (i *MdbSqlServerCluster) ToMdbSqlServerClusterOutputWithContext(ctx context.Context) MdbSqlServerClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlServerClusterOutput)
}

// MdbSqlServerClusterArrayInput is an input type that accepts MdbSqlServerClusterArray and MdbSqlServerClusterArrayOutput values.
// You can construct a concrete instance of `MdbSqlServerClusterArrayInput` via:
//
//	MdbSqlServerClusterArray{ MdbSqlServerClusterArgs{...} }
type MdbSqlServerClusterArrayInput interface {
	pulumi.Input

	ToMdbSqlServerClusterArrayOutput() MdbSqlServerClusterArrayOutput
	ToMdbSqlServerClusterArrayOutputWithContext(context.Context) MdbSqlServerClusterArrayOutput
}

type MdbSqlServerClusterArray []MdbSqlServerClusterInput

func (MdbSqlServerClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbSqlServerCluster)(nil)).Elem()
}

func (i MdbSqlServerClusterArray) ToMdbSqlServerClusterArrayOutput() MdbSqlServerClusterArrayOutput {
	return i.ToMdbSqlServerClusterArrayOutputWithContext(context.Background())
}

func (i MdbSqlServerClusterArray) ToMdbSqlServerClusterArrayOutputWithContext(ctx context.Context) MdbSqlServerClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlServerClusterArrayOutput)
}

// MdbSqlServerClusterMapInput is an input type that accepts MdbSqlServerClusterMap and MdbSqlServerClusterMapOutput values.
// You can construct a concrete instance of `MdbSqlServerClusterMapInput` via:
//
//	MdbSqlServerClusterMap{ "key": MdbSqlServerClusterArgs{...} }
type MdbSqlServerClusterMapInput interface {
	pulumi.Input

	ToMdbSqlServerClusterMapOutput() MdbSqlServerClusterMapOutput
	ToMdbSqlServerClusterMapOutputWithContext(context.Context) MdbSqlServerClusterMapOutput
}

type MdbSqlServerClusterMap map[string]MdbSqlServerClusterInput

func (MdbSqlServerClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbSqlServerCluster)(nil)).Elem()
}

func (i MdbSqlServerClusterMap) ToMdbSqlServerClusterMapOutput() MdbSqlServerClusterMapOutput {
	return i.ToMdbSqlServerClusterMapOutputWithContext(context.Background())
}

func (i MdbSqlServerClusterMap) ToMdbSqlServerClusterMapOutputWithContext(ctx context.Context) MdbSqlServerClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbSqlServerClusterMapOutput)
}

type MdbSqlServerClusterOutput struct{ *pulumi.OutputState }

func (MdbSqlServerClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbSqlServerCluster)(nil)).Elem()
}

func (o MdbSqlServerClusterOutput) ToMdbSqlServerClusterOutput() MdbSqlServerClusterOutput {
	return o
}

func (o MdbSqlServerClusterOutput) ToMdbSqlServerClusterOutputWithContext(ctx context.Context) MdbSqlServerClusterOutput {
	return o
}

func (o MdbSqlServerClusterOutput) BackupWindowStart() MdbSqlServerClusterBackupWindowStartOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterBackupWindowStartOutput { return v.BackupWindowStart }).(MdbSqlServerClusterBackupWindowStartOutput)
}

func (o MdbSqlServerClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) Databases() MdbSqlServerClusterDatabaseArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterDatabaseArrayOutput { return v.Databases }).(MdbSqlServerClusterDatabaseArrayOutput)
}

func (o MdbSqlServerClusterOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

func (o MdbSqlServerClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o MdbSqlServerClusterOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) Health() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Health }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) HostGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringArrayOutput { return v.HostGroupIds }).(pulumi.StringArrayOutput)
}

func (o MdbSqlServerClusterOutput) Hosts() MdbSqlServerClusterHostArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterHostArrayOutput { return v.Hosts }).(MdbSqlServerClusterHostArrayOutput)
}

func (o MdbSqlServerClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o MdbSqlServerClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) Resources() MdbSqlServerClusterResourcesOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterResourcesOutput { return v.Resources }).(MdbSqlServerClusterResourcesOutput)
}

func (o MdbSqlServerClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o MdbSqlServerClusterOutput) Sqlcollation() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Sqlcollation }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) SqlserverConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringMapOutput { return v.SqlserverConfig }).(pulumi.StringMapOutput)
}

func (o MdbSqlServerClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o MdbSqlServerClusterOutput) Users() MdbSqlServerClusterUserArrayOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) MdbSqlServerClusterUserArrayOutput { return v.Users }).(MdbSqlServerClusterUserArrayOutput)
}

func (o MdbSqlServerClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbSqlServerCluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type MdbSqlServerClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbSqlServerClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbSqlServerCluster)(nil)).Elem()
}

func (o MdbSqlServerClusterArrayOutput) ToMdbSqlServerClusterArrayOutput() MdbSqlServerClusterArrayOutput {
	return o
}

func (o MdbSqlServerClusterArrayOutput) ToMdbSqlServerClusterArrayOutputWithContext(ctx context.Context) MdbSqlServerClusterArrayOutput {
	return o
}

func (o MdbSqlServerClusterArrayOutput) Index(i pulumi.IntInput) MdbSqlServerClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbSqlServerCluster {
		return vs[0].([]*MdbSqlServerCluster)[vs[1].(int)]
	}).(MdbSqlServerClusterOutput)
}

type MdbSqlServerClusterMapOutput struct{ *pulumi.OutputState }

func (MdbSqlServerClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbSqlServerCluster)(nil)).Elem()
}

func (o MdbSqlServerClusterMapOutput) ToMdbSqlServerClusterMapOutput() MdbSqlServerClusterMapOutput {
	return o
}

func (o MdbSqlServerClusterMapOutput) ToMdbSqlServerClusterMapOutputWithContext(ctx context.Context) MdbSqlServerClusterMapOutput {
	return o
}

func (o MdbSqlServerClusterMapOutput) MapIndex(k pulumi.StringInput) MdbSqlServerClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbSqlServerCluster {
		return vs[0].(map[string]*MdbSqlServerCluster)[vs[1].(string)]
	}).(MdbSqlServerClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlServerClusterInput)(nil)).Elem(), &MdbSqlServerCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlServerClusterArrayInput)(nil)).Elem(), MdbSqlServerClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbSqlServerClusterMapInput)(nil)).Elem(), MdbSqlServerClusterMap{})
	pulumi.RegisterOutputType(MdbSqlServerClusterOutput{})
	pulumi.RegisterOutputType(MdbSqlServerClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbSqlServerClusterMapOutput{})
}
