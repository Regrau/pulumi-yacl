// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoggingGroup struct {
	pulumi.CustomResourceState

	CloudId         pulumi.StringOutput    `pulumi:"cloudId"`
	CreatedAt       pulumi.StringOutput    `pulumi:"createdAt"`
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	FolderId        pulumi.StringOutput    `pulumi:"folderId"`
	Labels          pulumi.StringMapOutput `pulumi:"labels"`
	Name            pulumi.StringOutput    `pulumi:"name"`
	RetentionPeriod pulumi.StringOutput    `pulumi:"retentionPeriod"`
	Status          pulumi.StringOutput    `pulumi:"status"`
}

// NewLoggingGroup registers a new resource with the given unique name, arguments, and options.
func NewLoggingGroup(ctx *pulumi.Context,
	name string, args *LoggingGroupArgs, opts ...pulumi.ResourceOption) (*LoggingGroup, error) {
	if args == nil {
		args = &LoggingGroupArgs{}
	}

	var resource LoggingGroup
	err := ctx.RegisterResource("yandex:index/loggingGroup:LoggingGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingGroup gets an existing LoggingGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingGroupState, opts ...pulumi.ResourceOption) (*LoggingGroup, error) {
	var resource LoggingGroup
	err := ctx.ReadResource("yandex:index/loggingGroup:LoggingGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingGroup resources.
type loggingGroupState struct {
	CloudId         *string           `pulumi:"cloudId"`
	CreatedAt       *string           `pulumi:"createdAt"`
	Description     *string           `pulumi:"description"`
	FolderId        *string           `pulumi:"folderId"`
	Labels          map[string]string `pulumi:"labels"`
	Name            *string           `pulumi:"name"`
	RetentionPeriod *string           `pulumi:"retentionPeriod"`
	Status          *string           `pulumi:"status"`
}

type LoggingGroupState struct {
	CloudId         pulumi.StringPtrInput
	CreatedAt       pulumi.StringPtrInput
	Description     pulumi.StringPtrInput
	FolderId        pulumi.StringPtrInput
	Labels          pulumi.StringMapInput
	Name            pulumi.StringPtrInput
	RetentionPeriod pulumi.StringPtrInput
	Status          pulumi.StringPtrInput
}

func (LoggingGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingGroupState)(nil)).Elem()
}

type loggingGroupArgs struct {
	Description     *string           `pulumi:"description"`
	FolderId        *string           `pulumi:"folderId"`
	Labels          map[string]string `pulumi:"labels"`
	Name            *string           `pulumi:"name"`
	RetentionPeriod *string           `pulumi:"retentionPeriod"`
}

// The set of arguments for constructing a LoggingGroup resource.
type LoggingGroupArgs struct {
	Description     pulumi.StringPtrInput
	FolderId        pulumi.StringPtrInput
	Labels          pulumi.StringMapInput
	Name            pulumi.StringPtrInput
	RetentionPeriod pulumi.StringPtrInput
}

func (LoggingGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingGroupArgs)(nil)).Elem()
}

type LoggingGroupInput interface {
	pulumi.Input

	ToLoggingGroupOutput() LoggingGroupOutput
	ToLoggingGroupOutputWithContext(ctx context.Context) LoggingGroupOutput
}

func (*LoggingGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingGroup)(nil)).Elem()
}

func (i *LoggingGroup) ToLoggingGroupOutput() LoggingGroupOutput {
	return i.ToLoggingGroupOutputWithContext(context.Background())
}

func (i *LoggingGroup) ToLoggingGroupOutputWithContext(ctx context.Context) LoggingGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingGroupOutput)
}

// LoggingGroupArrayInput is an input type that accepts LoggingGroupArray and LoggingGroupArrayOutput values.
// You can construct a concrete instance of `LoggingGroupArrayInput` via:
//
//	LoggingGroupArray{ LoggingGroupArgs{...} }
type LoggingGroupArrayInput interface {
	pulumi.Input

	ToLoggingGroupArrayOutput() LoggingGroupArrayOutput
	ToLoggingGroupArrayOutputWithContext(context.Context) LoggingGroupArrayOutput
}

type LoggingGroupArray []LoggingGroupInput

func (LoggingGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingGroup)(nil)).Elem()
}

func (i LoggingGroupArray) ToLoggingGroupArrayOutput() LoggingGroupArrayOutput {
	return i.ToLoggingGroupArrayOutputWithContext(context.Background())
}

func (i LoggingGroupArray) ToLoggingGroupArrayOutputWithContext(ctx context.Context) LoggingGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingGroupArrayOutput)
}

// LoggingGroupMapInput is an input type that accepts LoggingGroupMap and LoggingGroupMapOutput values.
// You can construct a concrete instance of `LoggingGroupMapInput` via:
//
//	LoggingGroupMap{ "key": LoggingGroupArgs{...} }
type LoggingGroupMapInput interface {
	pulumi.Input

	ToLoggingGroupMapOutput() LoggingGroupMapOutput
	ToLoggingGroupMapOutputWithContext(context.Context) LoggingGroupMapOutput
}

type LoggingGroupMap map[string]LoggingGroupInput

func (LoggingGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingGroup)(nil)).Elem()
}

func (i LoggingGroupMap) ToLoggingGroupMapOutput() LoggingGroupMapOutput {
	return i.ToLoggingGroupMapOutputWithContext(context.Background())
}

func (i LoggingGroupMap) ToLoggingGroupMapOutputWithContext(ctx context.Context) LoggingGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingGroupMapOutput)
}

type LoggingGroupOutput struct{ *pulumi.OutputState }

func (LoggingGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingGroup)(nil)).Elem()
}

func (o LoggingGroupOutput) ToLoggingGroupOutput() LoggingGroupOutput {
	return o
}

func (o LoggingGroupOutput) ToLoggingGroupOutputWithContext(ctx context.Context) LoggingGroupOutput {
	return o
}

func (o LoggingGroupOutput) CloudId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringOutput { return v.CloudId }).(pulumi.StringOutput)
}

func (o LoggingGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LoggingGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o LoggingGroupOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

func (o LoggingGroupOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LoggingGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LoggingGroupOutput) RetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringOutput { return v.RetentionPeriod }).(pulumi.StringOutput)
}

func (o LoggingGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type LoggingGroupArrayOutput struct{ *pulumi.OutputState }

func (LoggingGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingGroup)(nil)).Elem()
}

func (o LoggingGroupArrayOutput) ToLoggingGroupArrayOutput() LoggingGroupArrayOutput {
	return o
}

func (o LoggingGroupArrayOutput) ToLoggingGroupArrayOutputWithContext(ctx context.Context) LoggingGroupArrayOutput {
	return o
}

func (o LoggingGroupArrayOutput) Index(i pulumi.IntInput) LoggingGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoggingGroup {
		return vs[0].([]*LoggingGroup)[vs[1].(int)]
	}).(LoggingGroupOutput)
}

type LoggingGroupMapOutput struct{ *pulumi.OutputState }

func (LoggingGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingGroup)(nil)).Elem()
}

func (o LoggingGroupMapOutput) ToLoggingGroupMapOutput() LoggingGroupMapOutput {
	return o
}

func (o LoggingGroupMapOutput) ToLoggingGroupMapOutputWithContext(ctx context.Context) LoggingGroupMapOutput {
	return o
}

func (o LoggingGroupMapOutput) MapIndex(k pulumi.StringInput) LoggingGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoggingGroup {
		return vs[0].(map[string]*LoggingGroup)[vs[1].(string)]
	}).(LoggingGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingGroupInput)(nil)).Elem(), &LoggingGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingGroupArrayInput)(nil)).Elem(), LoggingGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingGroupMapInput)(nil)).Elem(), LoggingGroupMap{})
	pulumi.RegisterOutputType(LoggingGroupOutput{})
	pulumi.RegisterOutputType(LoggingGroupArrayOutput{})
	pulumi.RegisterOutputType(LoggingGroupMapOutput{})
}
