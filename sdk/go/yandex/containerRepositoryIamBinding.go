// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ContainerRepositoryIamBinding struct {
	pulumi.CustomResourceState

	Members      pulumi.StringArrayOutput `pulumi:"members"`
	RepositoryId pulumi.StringOutput      `pulumi:"repositoryId"`
	Role         pulumi.StringOutput      `pulumi:"role"`
	SleepAfter   pulumi.IntPtrOutput      `pulumi:"sleepAfter"`
}

// NewContainerRepositoryIamBinding registers a new resource with the given unique name, arguments, and options.
func NewContainerRepositoryIamBinding(ctx *pulumi.Context,
	name string, args *ContainerRepositoryIamBindingArgs, opts ...pulumi.ResourceOption) (*ContainerRepositoryIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ContainerRepositoryIamBinding
	err := ctx.RegisterResource("yandex:index/containerRepositoryIamBinding:ContainerRepositoryIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRepositoryIamBinding gets an existing ContainerRepositoryIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRepositoryIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRepositoryIamBindingState, opts ...pulumi.ResourceOption) (*ContainerRepositoryIamBinding, error) {
	var resource ContainerRepositoryIamBinding
	err := ctx.ReadResource("yandex:index/containerRepositoryIamBinding:ContainerRepositoryIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRepositoryIamBinding resources.
type containerRepositoryIamBindingState struct {
	Members      []string `pulumi:"members"`
	RepositoryId *string  `pulumi:"repositoryId"`
	Role         *string  `pulumi:"role"`
	SleepAfter   *int     `pulumi:"sleepAfter"`
}

type ContainerRepositoryIamBindingState struct {
	Members      pulumi.StringArrayInput
	RepositoryId pulumi.StringPtrInput
	Role         pulumi.StringPtrInput
	SleepAfter   pulumi.IntPtrInput
}

func (ContainerRepositoryIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRepositoryIamBindingState)(nil)).Elem()
}

type containerRepositoryIamBindingArgs struct {
	Members      []string `pulumi:"members"`
	RepositoryId string   `pulumi:"repositoryId"`
	Role         string   `pulumi:"role"`
	SleepAfter   *int     `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a ContainerRepositoryIamBinding resource.
type ContainerRepositoryIamBindingArgs struct {
	Members      pulumi.StringArrayInput
	RepositoryId pulumi.StringInput
	Role         pulumi.StringInput
	SleepAfter   pulumi.IntPtrInput
}

func (ContainerRepositoryIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRepositoryIamBindingArgs)(nil)).Elem()
}

type ContainerRepositoryIamBindingInput interface {
	pulumi.Input

	ToContainerRepositoryIamBindingOutput() ContainerRepositoryIamBindingOutput
	ToContainerRepositoryIamBindingOutputWithContext(ctx context.Context) ContainerRepositoryIamBindingOutput
}

func (*ContainerRepositoryIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRepositoryIamBinding)(nil)).Elem()
}

func (i *ContainerRepositoryIamBinding) ToContainerRepositoryIamBindingOutput() ContainerRepositoryIamBindingOutput {
	return i.ToContainerRepositoryIamBindingOutputWithContext(context.Background())
}

func (i *ContainerRepositoryIamBinding) ToContainerRepositoryIamBindingOutputWithContext(ctx context.Context) ContainerRepositoryIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRepositoryIamBindingOutput)
}

// ContainerRepositoryIamBindingArrayInput is an input type that accepts ContainerRepositoryIamBindingArray and ContainerRepositoryIamBindingArrayOutput values.
// You can construct a concrete instance of `ContainerRepositoryIamBindingArrayInput` via:
//
//	ContainerRepositoryIamBindingArray{ ContainerRepositoryIamBindingArgs{...} }
type ContainerRepositoryIamBindingArrayInput interface {
	pulumi.Input

	ToContainerRepositoryIamBindingArrayOutput() ContainerRepositoryIamBindingArrayOutput
	ToContainerRepositoryIamBindingArrayOutputWithContext(context.Context) ContainerRepositoryIamBindingArrayOutput
}

type ContainerRepositoryIamBindingArray []ContainerRepositoryIamBindingInput

func (ContainerRepositoryIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRepositoryIamBinding)(nil)).Elem()
}

func (i ContainerRepositoryIamBindingArray) ToContainerRepositoryIamBindingArrayOutput() ContainerRepositoryIamBindingArrayOutput {
	return i.ToContainerRepositoryIamBindingArrayOutputWithContext(context.Background())
}

func (i ContainerRepositoryIamBindingArray) ToContainerRepositoryIamBindingArrayOutputWithContext(ctx context.Context) ContainerRepositoryIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRepositoryIamBindingArrayOutput)
}

// ContainerRepositoryIamBindingMapInput is an input type that accepts ContainerRepositoryIamBindingMap and ContainerRepositoryIamBindingMapOutput values.
// You can construct a concrete instance of `ContainerRepositoryIamBindingMapInput` via:
//
//	ContainerRepositoryIamBindingMap{ "key": ContainerRepositoryIamBindingArgs{...} }
type ContainerRepositoryIamBindingMapInput interface {
	pulumi.Input

	ToContainerRepositoryIamBindingMapOutput() ContainerRepositoryIamBindingMapOutput
	ToContainerRepositoryIamBindingMapOutputWithContext(context.Context) ContainerRepositoryIamBindingMapOutput
}

type ContainerRepositoryIamBindingMap map[string]ContainerRepositoryIamBindingInput

func (ContainerRepositoryIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRepositoryIamBinding)(nil)).Elem()
}

func (i ContainerRepositoryIamBindingMap) ToContainerRepositoryIamBindingMapOutput() ContainerRepositoryIamBindingMapOutput {
	return i.ToContainerRepositoryIamBindingMapOutputWithContext(context.Background())
}

func (i ContainerRepositoryIamBindingMap) ToContainerRepositoryIamBindingMapOutputWithContext(ctx context.Context) ContainerRepositoryIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRepositoryIamBindingMapOutput)
}

type ContainerRepositoryIamBindingOutput struct{ *pulumi.OutputState }

func (ContainerRepositoryIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRepositoryIamBinding)(nil)).Elem()
}

func (o ContainerRepositoryIamBindingOutput) ToContainerRepositoryIamBindingOutput() ContainerRepositoryIamBindingOutput {
	return o
}

func (o ContainerRepositoryIamBindingOutput) ToContainerRepositoryIamBindingOutputWithContext(ctx context.Context) ContainerRepositoryIamBindingOutput {
	return o
}

func (o ContainerRepositoryIamBindingOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContainerRepositoryIamBinding) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ContainerRepositoryIamBindingOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRepositoryIamBinding) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

func (o ContainerRepositoryIamBindingOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *ContainerRepositoryIamBinding) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

func (o ContainerRepositoryIamBindingOutput) SleepAfter() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ContainerRepositoryIamBinding) pulumi.IntPtrOutput { return v.SleepAfter }).(pulumi.IntPtrOutput)
}

type ContainerRepositoryIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ContainerRepositoryIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRepositoryIamBinding)(nil)).Elem()
}

func (o ContainerRepositoryIamBindingArrayOutput) ToContainerRepositoryIamBindingArrayOutput() ContainerRepositoryIamBindingArrayOutput {
	return o
}

func (o ContainerRepositoryIamBindingArrayOutput) ToContainerRepositoryIamBindingArrayOutputWithContext(ctx context.Context) ContainerRepositoryIamBindingArrayOutput {
	return o
}

func (o ContainerRepositoryIamBindingArrayOutput) Index(i pulumi.IntInput) ContainerRepositoryIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerRepositoryIamBinding {
		return vs[0].([]*ContainerRepositoryIamBinding)[vs[1].(int)]
	}).(ContainerRepositoryIamBindingOutput)
}

type ContainerRepositoryIamBindingMapOutput struct{ *pulumi.OutputState }

func (ContainerRepositoryIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRepositoryIamBinding)(nil)).Elem()
}

func (o ContainerRepositoryIamBindingMapOutput) ToContainerRepositoryIamBindingMapOutput() ContainerRepositoryIamBindingMapOutput {
	return o
}

func (o ContainerRepositoryIamBindingMapOutput) ToContainerRepositoryIamBindingMapOutputWithContext(ctx context.Context) ContainerRepositoryIamBindingMapOutput {
	return o
}

func (o ContainerRepositoryIamBindingMapOutput) MapIndex(k pulumi.StringInput) ContainerRepositoryIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerRepositoryIamBinding {
		return vs[0].(map[string]*ContainerRepositoryIamBinding)[vs[1].(string)]
	}).(ContainerRepositoryIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRepositoryIamBindingInput)(nil)).Elem(), &ContainerRepositoryIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRepositoryIamBindingArrayInput)(nil)).Elem(), ContainerRepositoryIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRepositoryIamBindingMapInput)(nil)).Elem(), ContainerRepositoryIamBindingMap{})
	pulumi.RegisterOutputType(ContainerRepositoryIamBindingOutput{})
	pulumi.RegisterOutputType(ContainerRepositoryIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ContainerRepositoryIamBindingMapOutput{})
}
